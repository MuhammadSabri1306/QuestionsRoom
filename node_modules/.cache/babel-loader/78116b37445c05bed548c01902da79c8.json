{"ast":null,"code":"import _slicedToArray from \"F:/Dev/VueProjects/questions-room/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, signOut, GoogleAuthProvider } from \"firebase/auth\";\nimport { getDatabase, ref, push, set, query, orderByChild, onChildAdded, onChildRemoved, onChildChanged } from \"firebase/database\";\nimport firebaseConfig from \"./firebase-config\";\ninitializeApp(firebaseConfig);\n\nvar dateToTimeString = function dateToTimeString(date) {\n  var hours = date.getHours().toString(),\n      minutes = date.getMinutes().toString();\n  if (hours.length < 2) hours = \"0\" + hours;\n  if (minutes.length < 2) minutes = \"0\" + minutes;\n  return hours + \".\" + minutes;\n};\n\nvar getMainRef = function getMainRef(path) {\n  var db = getDatabase();\n  return ref(db, path);\n};\n\nvar login = function login(callback) {\n  var provider = new GoogleAuthProvider(),\n      auth = getAuth();\n  provider.setCustomParameters({\n    prompt: \"select_account\"\n  });\n  signInWithPopup(auth, provider).then(function (result) {\n    return callback(result.user);\n  }).catch(function (error) {\n    return console.error(\"Error Code: \".concat(error.code, \"\\n\").concat(error.message));\n  });\n};\n\nvar logout = function logout(callback) {\n  var auth = getAuth();\n  signOut(auth).then(callback);\n};\n\nvar newRoom = function newRoom(roomName) {\n  var roomsRef = getMainRef(\"rooms\");\n  var newRoomRef = push(roomsRef);\n  var roomId = newRoomRef.key;\n  var questionsRef = getMainRef(\"rooms/\".concat(roomId, \"/questions\")),\n      value = {\n    roomId: roomId,\n    roomName: roomName\n  };\n\n  var onRoomDeleted = function onRoomDeleted(callback) {\n    onChildRemoved(roomsRef, function (snapshot) {\n      if (snapshot.key == roomId) callback();\n    });\n  };\n\n  var onQuestionAdded = function onQuestionAdded(callback) {\n    onChildAdded(questionsRef, function (snapshot) {\n      var key = snapshot.key;\n\n      var _snapshot$val = snapshot.val(),\n          userId = _snapshot$val.userId,\n          username = _snapshot$val.username,\n          content = _snapshot$val.content,\n          usersHandsUp = _snapshot$val.usersHandsUp,\n          time = _snapshot$val.time;\n\n      var tempArr = [];\n      if (usersHandsUp) Object.entries(usersHandsUp).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            userId = _ref2[1];\n\n        return tempArr.push({\n          key: key,\n          userId: userId\n        });\n      });\n      usersHandsUp = tempArr;\n      var timeObj = new Date(time);\n      time = dateToTimeString(timeObj);\n      callback({\n        key: key,\n        userId: userId,\n        username: username,\n        content: content,\n        usersHandsUp: usersHandsUp,\n        time: time\n      });\n    });\n  };\n\n  var onQuestionRemoved = function onQuestionRemoved(callback) {\n    onChildRemoved(questionsRef, function (snapshot) {\n      callback(snapshot.key);\n    });\n  };\n\n  return new Promise(function (resolve, reject) {\n    set(newRoomRef, {\n      roomName: roomName\n    }).then(function () {\n      resolve({\n        value: value,\n        onRoomDeleted: onRoomDeleted,\n        onQuestionAdded: onQuestionAdded,\n        onQuestionRemoved: onQuestionRemoved\n      });\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar deleteRoom = function deleteRoom(roomId) {\n  var delRoomRef = getMainRef(\"rooms/\" + roomId);\n  set(delRoomRef, null);\n};\n\nvar pushQuestion = function pushQuestion(roomId, userId, username, content) {\n  var newQuestionRef = push(getMainRef(\"rooms/\".concat(roomId, \"/questions\")));\n  var questionKey = newQuestionRef.key;\n  var time = Date.now(),\n      questionItemRef = getMainRef(\"rooms/\".concat(roomId, \"/questions/\").concat(questionKey)),\n      usersHandsUpRef = getMainRef(\"rooms/\".concat(roomId, \"/questions/\").concat(questionKey, \"/usersHandsUp\"));\n\n  var onQuestionChildChanged = function onQuestionChildChanged(callback) {\n    onValue(questionItemRef, function (snapshot) {\n      var key = snapshot.key;\n\n      var _snapshot$val2 = snapshot.val(),\n          userId = _snapshot$val2.userId,\n          username = _snapshot$val2.username,\n          content = _snapshot$val2.content,\n          usersHandsUp = _snapshot$val2.usersHandsUp,\n          time = _snapshot$val2.time;\n\n      var tempArr = [];\n      if (usersHandsUp) Object.entries(usersHandsUp).forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            userId = _ref4[1];\n\n        return tempArr.push({\n          key: key,\n          userId: userId\n        });\n      });\n      usersHandsUp = tempArr;\n      var timeObj = new Date(time);\n      time = dateToTimeString(timeObj);\n      callback({\n        key: key,\n        userId: userId,\n        username: username,\n        content: content,\n        usersHandsUp: usersHandsUp,\n        time: time\n      });\n    });\n  };\n\n  return new Promise(function (resolve, reject) {\n    set(newQuestionRef, {\n      userId: userId,\n      username: username,\n      content: content,\n      time: time\n    }).then(function () {\n      resolve({\n        onQuestionChildChanged: onQuestionChildChanged\n      });\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar addUsersHandsUp = function addUsersHandsUp(roomId, questionKey, userId) {\n  var newUsersHandsUpRef = push(getMainRef(\"rooms/\".concat(roomId, \"/questions/\").concat(questionKey, \"/usersHandsUp\")));\n  set(newUsersHandsUpRef, userId);\n};\n\nvar removeUsersHandsUp = function removeUsersHandsUp(roomId, questionKey, usersHandsUpKey) {\n  var delUsersHandsUpRef = getMainRef(\"rooms/\".concat(roomId, \"/questions/\").concat(questionKey, \"/usersHandsUp/\").concat(usersHandsUpKey));\n  set(delUsersHandsUpRef, null);\n};\n\nvar changeUsername = function changeUsername(roomId, questionsKey, username) {\n  var roomsRef = getMainRef(\"rooms/\" + roomId);\n  var updates = {};\n  questionsKey.forEach(function (questionKey) {\n    updates[\"/questions/\" + questionKey + \"/username\"] = username;\n  });\n  update(roomsRef, updates);\n};\n\nexport default {\n  login: login,\n  logout: logout,\n  newRoom: newRoom,\n  deleteRoom: deleteRoom,\n  pushQuestion: pushQuestion,\n  changeUsername: changeUsername\n};","map":{"version":3,"sources":["F:/Dev/VueProjects/questions-room/src/services/firebase.js"],"names":["initializeApp","getAuth","signInWithPopup","signOut","GoogleAuthProvider","getDatabase","ref","push","set","query","orderByChild","onChildAdded","onChildRemoved","onChildChanged","firebaseConfig","dateToTimeString","date","hours","getHours","toString","minutes","getMinutes","length","getMainRef","path","db","login","callback","provider","auth","setCustomParameters","prompt","then","result","user","catch","error","console","code","message","logout","newRoom","roomName","roomsRef","newRoomRef","roomId","key","questionsRef","value","onRoomDeleted","snapshot","onQuestionAdded","val","userId","username","content","usersHandsUp","time","tempArr","Object","entries","forEach","timeObj","Date","onQuestionRemoved","Promise","resolve","reject","deleteRoom","delRoomRef","pushQuestion","newQuestionRef","questionKey","now","questionItemRef","usersHandsUpRef","onQuestionChildChanged","onValue","addUsersHandsUp","newUsersHandsUpRef","removeUsersHandsUp","usersHandsUpKey","delUsersHandsUpRef","changeUsername","questionsKey","updates","update"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, signInWithPopup, signOut, GoogleAuthProvider } from \"firebase/auth\";\r\nimport { getDatabase, ref, push, set, query, orderByChild, onChildAdded, onChildRemoved, onChildChanged } from \"firebase/database\";\r\nimport firebaseConfig from \"./firebase-config\";\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nconst dateToTimeString = date => {\r\n\tlet hours = date.getHours().toString(),\r\n\t\tminutes = date.getMinutes().toString();\r\n\r\n\tif(hours.length < 2) hours = \"0\" + hours;\r\n\tif(minutes.length < 2) minutes = \"0\" + minutes;\r\n\r\n\treturn hours + \".\" + minutes;\r\n};\r\n\r\nconst getMainRef = path => {\r\n\tconst db = getDatabase();\r\n\treturn ref(db, path);\r\n};\r\n\r\nconst login = callback => {\r\n\tconst provider = new GoogleAuthProvider(),\r\n\t\tauth = getAuth();\r\n\r\n\tprovider.setCustomParameters({\r\n\t\tprompt: \"select_account\"\r\n\t});\r\n\r\n\tsignInWithPopup(auth, provider)\r\n\t\t.then(result => callback(result.user))\r\n\t\t.catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\nconst logout = callback => {\r\n\tconst auth = getAuth();\r\n\tsignOut(auth).then(callback);\r\n};\r\n\r\nconst newRoom = roomName => {\r\n\tconst roomsRef = getMainRef(\"rooms\");\r\n\tconst newRoomRef = push(roomsRef);\r\n\tconst roomId = newRoomRef.key;\r\n\r\n\tconst questionsRef = getMainRef(`rooms/${roomId}/questions`),\r\n\t\tvalue = { roomId, roomName };\r\n\r\n\tconst onRoomDeleted = callback => {\r\n\t\tonChildRemoved(roomsRef, snapshot => {\r\n\t\t\tif(snapshot.key == roomId) callback();\r\n\t\t})\r\n\t};\r\n\r\n\tconst onQuestionAdded = callback => {\r\n\t\tonChildAdded(questionsRef, snapshot => {\r\n\t\t\tconst key = snapshot.key;\r\n\t\t\tlet { userId, username, content, usersHandsUp, time } = snapshot.val();\r\n\r\n\t\t\tlet tempArr = [];\r\n\t\t\tif(usersHandsUp)\r\n\t\t\t\tObject.entries(usersHandsUp).forEach(([key, userId]) => tempArr.push({ key, userId }));\r\n\t\t\tusersHandsUp = tempArr;\r\n\r\n\t\t\tconst timeObj = new Date(time);\r\n\t\t\ttime = dateToTimeString(timeObj);\r\n\r\n\t\t\tcallback({ key, userId, username, content, usersHandsUp, time });\r\n\t\t});\r\n\t};\r\n\r\n\tconst onQuestionRemoved = callback => {\r\n\t\tonChildRemoved(questionsRef, snapshot => {\r\n\t\t\tcallback(snapshot.key);\r\n\t\t});\r\n\t};\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tset(newRoomRef, { roomName })\r\n\t\t\t.then(() => {\r\n\t\t\t\tresolve({ value, onRoomDeleted, onQuestionAdded, onQuestionRemoved });\r\n\t\t\t}).catch(error => {\r\n\t\t\t\treject(error);\r\n\t\t\t});\r\n\t});\r\n};\r\n\r\nconst deleteRoom = roomId => {\r\n\tconst delRoomRef = getMainRef(\"rooms/\" + roomId);\r\n\tset(delRoomRef, null);\r\n};\r\n\r\nconst pushQuestion = (roomId, userId, username, content) => {\r\n\tconst newQuestionRef = push(getMainRef(`rooms/${roomId}/questions`));\r\n\tconst questionKey = newQuestionRef.key;\r\n\r\n\tconst time = Date.now(),\r\n\t\tquestionItemRef = getMainRef(`rooms/${roomId}/questions/${questionKey}`),\r\n\t\tusersHandsUpRef = getMainRef(`rooms/${roomId}/questions/${questionKey}/usersHandsUp`);\r\n\r\n\tconst onQuestionChildChanged = callback => {\r\n\t\tonValue(questionItemRef, snapshot => {\r\n\t\t\tconst key = snapshot.key;\r\n\t\t\tlet { userId, username, content, usersHandsUp, time } = snapshot.val();\r\n\r\n\t\t\tlet tempArr = [];\r\n\t\t\tif(usersHandsUp)\r\n\t\t\t\tObject.entries(usersHandsUp).forEach(([key, userId]) => tempArr.push({ key, userId }));\r\n\t\t\tusersHandsUp = tempArr;\r\n\r\n\t\t\tconst timeObj = new Date(time);\r\n\t\t\ttime = dateToTimeString(timeObj);\r\n\r\n\t\t\tcallback({ key, userId, username, content, usersHandsUp, time });\r\n\t\t});\r\n\t};\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tset(newQuestionRef, { userId, username, content, time })\r\n\t\t\t.then(() => {\r\n\t\t\t\tresolve({ onQuestionChildChanged });\r\n\t\t\t}).catch(error => {\r\n\t\t\t\treject(error);\r\n\t\t\t});\r\n\t});\r\n};\r\n\r\nconst addUsersHandsUp = (roomId, questionKey, userId) => {\r\n\tconst newUsersHandsUpRef = push(getMainRef(`rooms/${roomId}/questions/${questionKey}/usersHandsUp`));\r\n\tset(newUsersHandsUpRef, userId);\r\n};\r\n\r\nconst removeUsersHandsUp = (roomId, questionKey, usersHandsUpKey) => {\r\n\tconst delUsersHandsUpRef = getMainRef(`rooms/${roomId}/questions/${questionKey}/usersHandsUp/${usersHandsUpKey}`);\r\n\tset(delUsersHandsUpRef, null);\r\n};\r\n\r\nconst changeUsername = (roomId, questionsKey, username) => {\r\n\tconst roomsRef = getMainRef(\"rooms/\" + roomId);\r\n\tlet updates = {};\r\n\tquestionsKey.forEach(questionKey => {\r\n\t\tupdates[\"/questions/\" + questionKey + \"/username\"] = username;\r\n\t});\r\n\r\n\tupdate(roomsRef, updates);\r\n};\r\n\r\nexport default { login, logout, newRoom, deleteRoom, pushQuestion, changeUsername };\r\n"]},"metadata":{},"sourceType":"module"}