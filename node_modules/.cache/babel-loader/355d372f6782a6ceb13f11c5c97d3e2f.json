{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { getDatabase, ref, push, set, update, onValue, onChildAdded, onChildRemoved, query, orderByChild } from \"firebase/database\";\nimport firebaseConfig from \"./firebase-config\";\ninitializeApp(firebaseConfig);\n\nvar createId = function createId() {\n  var s4 = function s4() {\n    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n  };\n\n  return s4() + s4() + \"-\" + s4() + s4() + s4() + s4();\n};\n\nvar createEmptyDataRoom = function createEmptyDataRoom() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var data = {\n    room: {\n      id: \"\",\n      name: \"\"\n    },\n    loggedUser: {\n      userId: \"\",\n      isAdmin: false,\n      username: \"\",\n      email: \"\"\n    },\n    questions: []\n  };\n  if (params === null) return data;\n  data.room.id = createId();\n  data.room.name = params.roomName;\n  data.loggedUser.userId = params.userId;\n  data.loggedUser.isAdmin = true;\n  data.loggedUser.username = params.username;\n  data.loggedUser.email = params.email;\n  return data;\n};\n\nvar createQuestionsItem = function createQuestionsItem(username, userId, content) {\n  return {\n    username: username,\n    userId: userId,\n    content: content,\n    isHandsUp: false,\n    time: Date.now()\n  };\n};\n/* --------------------------- FIXED FIREBASE --------------------------- */\n\n\nvar dateToTimeString = function dateToTimeString(date) {\n  var hours = date.getHours().toString(),\n      minutes = date.getMinutes().toString();\n  if (hours.length < 2) hours = \"0\" + hours;\n  if (minutes.length < 2) minutes = \"0\" + minutes;\n  return hours + \".\" + minutes;\n};\n\nvar login = function login(callback) {\n  var provider = new GoogleAuthProvider(),\n      auth = getAuth();\n  signInWithPopup(auth, provider).then(function (result) {\n    return callback(result.user);\n  }).catch(function (error) {\n    return console.error(\"Error Code: \".concat(error.code, \"\\n\").concat(error.message));\n  });\n};\n\nvar newRoom = function newRoom(roomName, callback) {\n  var db = getDatabase();\n  var roomsListRef = ref(db, \"rooms\");\n  var newRoomPush = push(roomsListRef);\n  set(newRoomPush, {\n    roomName: roomName\n  }).then(function () {\n    callback({\n      id: newRoomPush.key,\n      name: roomName\n    });\n  });\n};\n\nvar deleteRoom = function deleteRoom(roomId, callback) {\n  // return createEmptyDataRoom();\n  var db = getDatabase();\n  set(ref(db, \"rooms/\" + roomId), null).then(callback).catch(function (error) {\n    return console.error(\"Error Code: \".concat(error.code, \"\\n\").concat(error.message));\n  });\n};\n\nvar getRoomQuestions = function getRoomQuestions(roomId, loggedUserId, callback) {\n  var db = getDatabase();\n  var questionsRef = ref(db, \"rooms/\" + roomId + \"/questions\");\n  var orderedQuestionsQuery = query(questionsRef, orderByChild(\"time\"));\n  console.log(orderedQuestionsQuery);\n  onValue(orderedQuestionsQuery, function (snapshot) {\n    if (!snapshot.exists()) {\n      console.log(\"No one questions yet!\");\n      return;\n    }\n\n    var key = snapshot.key;\n\n    var _snapshot$val = snapshot.val(),\n        userId = _snapshot$val.userId,\n        username = _snapshot$val.username,\n        content = _snapshot$val.content,\n        usersHandsUp = _snapshot$val.usersHandsUp,\n        time = _snapshot$val.time;\n\n    var isHandsUp = Object.keys(usersHandsUp).indexOf(loggedUserId) >= 0;\n    var timeObj = new Date(time);\n    time = dateToTimeString(timeObj);\n    callback({\n      key: key,\n      userId: userId,\n      username: username,\n      content: content,\n      isHandsUp: isHandsUp,\n      time: time\n    });\n  });\n};\n\nvar pushQuestion = function pushQuestion(roomId, userId, username, content) {\n  var db = getDatabase(),\n      time = Date.now();\n  var questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\n  var newQuestionQuery = push(questionsListRef);\n  set(newQuestionQuery, {\n    userId: userId,\n    username: username,\n    content: content,\n    time: time\n  });\n};\n\nvar event = {\n  onRoomAdded: function onRoomAdded(callback) {\n    var db = getDatabase();\n    var roomsListRef = ref(db, \"rooms\");\n    onChildAdded(roomsListRef, function (data) {\n      callback({\n        id: data.key,\n        name: data.val().roomName\n      });\n    });\n  },\n  onQuestionChanged: function onQuestionChanged(roomId, onAddedCallback, onremovedCallback) {\n    var db = getDatabase();\n    var questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\n\n    var getTargetQuestion = function getTargetQuestion(question) {\n      var userId = question.userId,\n          username = question.username,\n          content = question.content,\n          time = question.time;\n      var isHandsUp = false;\n      time = dateToTimeString(time);\n      return {\n        userId: userId,\n        username: username,\n        content: content,\n        isHandsUp: isHandsUp,\n        time: time\n      };\n    };\n\n    onChildAdded(questionsListRef, function (data) {\n      onAddedCallback(getTargetData(data.val()));\n    });\n    onChildRemoved(questionsListRef, function (data) {\n      onremovedCallback(getTargetData(data.val()));\n    });\n  }\n};\n\nvar changeUsername = function changeUsername(roomId, userId, username) {\n  var db = getDatabase();\n  onValue(ref(db, \"rooms/\" + roomId + \"/questions\"), function (snapshot) {\n    if (!snapshot.exists()) {\n      console.log(\"No one questions yet!\");\n      return;\n    }\n\n    var updates = [];\n    snapshot.val().forEach(function (item) {\n      if (item.userId == userId) updates[\"/questions/\" + item.key + \"/username\"] = username;\n      if (Object.keys(item.usersHandsUp).indexOf(userId) >= 0) updates[\"/questions/\" + item.key + \"/usersHandsUp/\" + userId] = username;\n    }); // update(ref(db), updates) return Promise\n\n    update(ref(db, \"rooms/\" + roomId), updates);\n  });\n};\n\nexport default {\n  login: login,\n  newRoom: newRoom,\n  deleteRoom: deleteRoom,\n  getRoomQuestions: getRoomQuestions,\n  pushQuestion: pushQuestion,\n  event: event,\n  changeUsername: changeUsername\n};","map":{"version":3,"sources":["F:/Dev/VueProjects/questions-room/src/services/firebase.js"],"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","getDatabase","ref","push","set","update","onValue","onChildAdded","onChildRemoved","query","orderByChild","firebaseConfig","createId","s4","Math","random","toString","substring","createEmptyDataRoom","params","data","room","id","name","loggedUser","userId","isAdmin","username","email","questions","roomName","createQuestionsItem","content","isHandsUp","time","Date","now","dateToTimeString","date","hours","getHours","minutes","getMinutes","length","login","callback","provider","auth","then","result","user","catch","error","console","code","message","newRoom","db","roomsListRef","newRoomPush","key","deleteRoom","roomId","getRoomQuestions","loggedUserId","questionsRef","orderedQuestionsQuery","log","snapshot","exists","val","usersHandsUp","Object","keys","indexOf","timeObj","pushQuestion","questionsListRef","newQuestionQuery","event","onRoomAdded","onQuestionChanged","onAddedCallback","onremovedCallback","getTargetQuestion","question","getTargetData","changeUsername","updates","forEach","item"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\nimport { getDatabase, ref, push, set, update, onValue, onChildAdded, onChildRemoved, query, orderByChild } from \"firebase/database\";\r\nimport firebaseConfig from \"./firebase-config\";\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nconst createId = () => {\r\n\tconst s4 = () => (((1 + Math.random()) * 0x10000)|0).toString(16).substring(1);\r\n\treturn s4() + s4() + \"-\" + s4() + s4() + s4() + s4();\r\n};\r\n\r\nconst createEmptyDataRoom = (params = null) => {\r\n\tconst data = {\r\n\t\troom: {\r\n\t\t\tid: \"\",\r\n\t\t\tname: \"\"\r\n\t\t},\r\n\t\tloggedUser: {\r\n\t\t\tuserId: \"\",\r\n\t\t\tisAdmin: false,\r\n\t\t\tusername: \"\",\r\n\t\t\temail: \"\"\r\n\t\t},\r\n\t\tquestions: []\r\n\t};\r\n\r\n\tif(params === null) return data;\r\n\r\n\tdata.room.id = createId();\r\n\tdata.room.name = params.roomName;\r\n\tdata.loggedUser.userId = params.userId;\r\n\tdata.loggedUser.isAdmin = true;\r\n\tdata.loggedUser.username = params.username;\r\n\tdata.loggedUser.email = params.email;\r\n\treturn data;\r\n};\r\n\r\nconst createQuestionsItem = (username, userId, content) => {\r\n\treturn {\r\n\t\tusername: username,\r\n\t\tuserId: userId,\r\n\t\tcontent: content,\r\n\t\tisHandsUp: false,\r\n\t\ttime: Date.now()\r\n\t};\r\n};\r\n\r\n/* --------------------------- FIXED FIREBASE --------------------------- */\r\n\r\nconst dateToTimeString = date => {\r\n\tlet hours = date.getHours().toString(),\r\n\t\tminutes = date.getMinutes().toString();\r\n\r\n\tif(hours.length < 2) hours = \"0\" + hours;\r\n\tif(minutes.length < 2) minutes = \"0\" + minutes;\r\n\r\n\treturn hours + \".\" + minutes;\r\n};\r\n\r\nconst login = callback => {\r\n\tconst provider = new GoogleAuthProvider(),\r\n\t\tauth = getAuth();\r\n\tsignInWithPopup(auth, provider)\r\n\t\t.then(result => callback(result.user))\r\n\t\t.catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\nconst newRoom = (roomName, callback) => {\r\n\tconst db = getDatabase();\r\n\tconst roomsListRef = ref(db, \"rooms\");\r\n\tconst newRoomPush = push(roomsListRef);\r\n\r\n\tset(newRoomPush, { roomName }).then(() => {\r\n\t\tcallback({ id: newRoomPush.key, name: roomName });\r\n\t});\r\n};\r\n\r\nconst deleteRoom = (roomId, callback) => {\r\n\t// return createEmptyDataRoom();\r\n\tconst db = getDatabase();\r\n\tset(ref(db, \"rooms/\" + roomId), null)\r\n\t\t.then(callback)\r\n\t\t.catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\nconst getRoomQuestions = (roomId, loggedUserId, callback) => {\r\n\tconst db = getDatabase();\r\n\tconst questionsRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\tconst orderedQuestionsQuery = query(questionsRef, orderByChild(\"time\"));\r\n\r\n\tconsole.log(orderedQuestionsQuery);\r\n\r\n\tonValue(orderedQuestionsQuery, snapshot => {\r\n\t\tif(!snapshot.exists()){\r\n\t\t\tconsole.log(\"No one questions yet!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst key = snapshot.key;\r\n\t\tlet { userId, username, content, usersHandsUp, time } = snapshot.val();\r\n\r\n\t\tconst isHandsUp = Object.keys(usersHandsUp).indexOf(loggedUserId) >= 0;\r\n\t\tconst timeObj = new Date(time);\r\n\t\ttime = dateToTimeString(timeObj);\r\n\r\n\t\tcallback({ key, userId, username, content, isHandsUp, time });\r\n\t});\r\n};\r\n\r\nconst pushQuestion = (roomId, userId, username, content) => {\r\n\tconst db = getDatabase(),\r\n\t\ttime = Date.now();\r\n\r\n\tconst questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\tconst newQuestionQuery = push(questionsListRef);\r\n\r\n\tset(newQuestionQuery, { userId, username, content, time });\r\n};\r\n\r\nconst event = {\r\n\tonRoomAdded: callback => {\r\n\t\tconst db = getDatabase();\r\n\t\tconst roomsListRef = ref(db, \"rooms\");\r\n\r\n\t\tonChildAdded(roomsListRef, data => {\r\n\t\t\tcallback({\r\n\t\t\t\tid: data.key,\r\n\t\t\t\tname: data.val().roomName\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\tonQuestionChanged: (roomId, onAddedCallback, onremovedCallback) => {\r\n\t\tconst db = getDatabase();\r\n\t\tconst questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\t\tconst getTargetQuestion = question => {\r\n\t\t\tlet { userId, username, content, time } = question;\r\n\r\n\t\t\tconst isHandsUp = false;\r\n\t\t\ttime = dateToTimeString(time);\r\n\r\n\t\t\treturn {userId, username, content, isHandsUp, time};\r\n\t\t};\r\n\r\n\t\tonChildAdded(questionsListRef, data => {\r\n\t\t\tonAddedCallback( getTargetData(data.val()) );\r\n\t\t});\r\n\r\n\t\tonChildRemoved(questionsListRef, data => {\r\n\t\t\tonremovedCallback( getTargetData(data.val()) );\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst changeUsername = (roomId, userId, username) => {\r\n\tconst db = getDatabase();\r\n\tonValue(ref(db, \"rooms/\" + roomId + \"/questions\"), snapshot => {\r\n\t\tif(!snapshot.exists()){\r\n\t\t\tconsole.log(\"No one questions yet!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst updates = [];\r\n\t\tsnapshot.val().forEach(item => {\r\n\t\t\tif(item.userId == userId)\r\n\t\t\t\tupdates[\"/questions/\" + item.key + \"/username\"] = username;\r\n\t\t\tif(Object.keys(item.usersHandsUp).indexOf(userId) >= 0)\r\n\t\t\t\tupdates[\"/questions/\" + item.key + \"/usersHandsUp/\" + userId] = username;\r\n\t\t});\r\n\t\t// update(ref(db), updates) return Promise\r\n\t\tupdate(ref(db, \"rooms/\" + roomId), updates);\r\n\t});\r\n};\r\n\r\nexport default { login, newRoom, deleteRoom, getRoomQuestions, pushQuestion, event, changeUsername };\r\n"]},"metadata":{},"sourceType":"module"}