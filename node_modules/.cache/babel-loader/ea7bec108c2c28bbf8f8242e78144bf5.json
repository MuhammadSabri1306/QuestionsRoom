{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport firebaseConfig from \"./firebase-config\";\ninitializeApp(firebaseConfig);\n\nconst createId = () => {\n  const s4 = () => ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n\n  return s4() + s4() + \"-\" + s4() + s4() + s4() + s4();\n};\n\nconst createEmptyDataRoom = (params = null) => {\n  const data = {\n    room: {\n      id: \"\",\n      name: \"\"\n    },\n    loggedUser: {\n      userId: \"\",\n      isAdmin: false,\n      username: \"\",\n      email: \"\"\n    },\n    questions: []\n  };\n  if (params === null) return data;\n  data.room.id = createId();\n  data.room.name = params.roomName;\n  data.loggedUser.userId = params.userId;\n  data.loggedUser.isAdmin = true;\n  data.loggedUser.username = params.username;\n  data.loggedUser.email = params.email;\n  return data;\n};\n\nconst createQuestionsItem = (username, userId, content) => {\n  return {\n    username: username,\n    userId: userId,\n    content: content,\n    isHandsUp: false,\n    time: Date.now()\n  };\n};\n\nconst newRoom = params => {\n  return createEmptyDataRoom(params);\n};\n\nconst deleteRoom = () => {\n  return createEmptyDataRoom();\n};\n\nconst changeUsername = (srcData, username, userId, callback) => {\n  srcData.loggedUser.username = username;\n  srcData.questions = srcData.questions.map(item => {\n    if (item.userId == userId) item.username = username;\n    return item;\n  });\n  callback(srcData);\n};\n\nconst changeEmail = (srcData, email, userId, callback) => {\n  srcData.loggedUser.email = email;\n  srcData.questions = srcData.questions.map(item => {\n    if (item.userId == userId) item.email = email;\n    return item;\n  });\n  callback(srcData);\n};\n\nconst pushQuestion = (srcData, username, userId, content, callback) => {\n  srcData.questions.push(createQuestionsItem(username, userId, content));\n  callback(srcData);\n};\n\nconst login = callback => {\n  const provider = new GoogleAuthProvider(),\n        auth = getAuth();\n  signInWithPopup(auth, provider).then(result => {\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    const user = result.user;\n    callback(token, user);\n  }).catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\n};\n\nexport default {\n  newRoom,\n  deleteRoom,\n  changeUsername,\n  changeEmail,\n  pushQuestion,\n  login\n};","map":{"version":3,"sources":["F:/Dev/VueProjects/questions-room/src/services/firebase.js"],"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","firebaseConfig","createId","s4","Math","random","toString","substring","createEmptyDataRoom","params","data","room","id","name","loggedUser","userId","isAdmin","username","email","questions","roomName","createQuestionsItem","content","isHandsUp","time","Date","now","newRoom","deleteRoom","changeUsername","srcData","callback","map","item","changeEmail","pushQuestion","push","login","provider","auth","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","console","code","message"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\nimport firebaseConfig from \"./firebase-config\";\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nconst createId = () => {\r\n\tconst s4 = () => (((1 + Math.random()) * 0x10000)|0).toString(16).substring(1);\r\n\treturn s4() + s4() + \"-\" + s4() + s4() + s4() + s4();\r\n};\r\n\r\nconst createEmptyDataRoom = (params = null) => {\r\n\tconst data = {\r\n\t\troom: {\r\n\t\t\tid: \"\",\r\n\t\t\tname: \"\"\r\n\t\t},\r\n\t\tloggedUser: {\r\n\t\t\tuserId: \"\",\r\n\t\t\tisAdmin: false,\r\n\t\t\tusername: \"\",\r\n\t\t\temail: \"\"\r\n\t\t},\r\n\t\tquestions: []\r\n\t};\r\n\r\n\tif(params === null) return data;\r\n\r\n\tdata.room.id = createId();\r\n\tdata.room.name = params.roomName;\r\n\tdata.loggedUser.userId = params.userId;\r\n\tdata.loggedUser.isAdmin = true;\r\n\tdata.loggedUser.username = params.username;\r\n\tdata.loggedUser.email = params.email;\r\n\treturn data;\r\n};\r\n\r\nconst createQuestionsItem = (username, userId, content) => {\r\n\treturn {\r\n\t\tusername: username,\r\n\t\tuserId: userId,\r\n\t\tcontent: content,\r\n\t\tisHandsUp: false,\r\n\t\ttime: Date.now()\r\n\t};\r\n};\r\n\r\nconst newRoom = params => {\r\n\treturn createEmptyDataRoom(params);\r\n};\r\n\r\nconst deleteRoom = () => {\r\n\treturn createEmptyDataRoom();\r\n};\r\n\r\nconst changeUsername = (srcData, username, userId, callback) => {\r\n\tsrcData.loggedUser.username = username;\r\n\tsrcData.questions = srcData.questions.map(item => {\r\n\t\tif(item.userId == userId) item.username = username;\r\n\t\treturn item;\r\n\t});\r\n\r\n\tcallback(srcData);\r\n};\r\n\r\nconst changeEmail = (srcData, email, userId, callback) => {\r\n\tsrcData.loggedUser.email = email;\r\n\tsrcData.questions = srcData.questions.map(item => {\r\n\t\tif(item.userId == userId) item.email = email;\r\n\t\treturn item;\r\n\t});\r\n\r\n\tcallback(srcData);\r\n};\r\n\r\nconst pushQuestion = (srcData, username, userId, content, callback) => {\r\n\tsrcData.questions.push(createQuestionsItem(username, userId, content));\r\n\tcallback(srcData);\r\n};\r\n\r\nconst login = callback => {\r\n\tconst provider = new GoogleAuthProvider(),\r\n\t\tauth = getAuth();\r\n\tsignInWithPopup(auth, provider)\r\n\t\t.then(result => {\r\n\t\t\tconst credential = GoogleAuthProvider.credentialFromResult(result);\r\n\t\t\tconst token = credential.accessToken;\r\n\t\t\tconst user = result.user;\r\n\r\n\t\t\tcallback(token, user);\r\n\t\t}).catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\nexport default { newRoom, deleteRoom, changeUsername, changeEmail, pushQuestion, login };\r\n"]},"metadata":{},"sourceType":"module"}