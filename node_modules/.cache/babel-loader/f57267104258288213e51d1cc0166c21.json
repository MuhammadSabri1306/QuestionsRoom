{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { getDatabase, ref, set } from \"firebase/database\";\nimport firebaseConfig from \"./firebase-config\";\ninitializeApp(firebaseConfig);\n\nvar createId = function createId() {\n  var s4 = function s4() {\n    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n  };\n\n  return s4() + s4() + \"-\" + s4() + s4() + s4() + s4();\n};\n\nvar createEmptyDataRoom = function createEmptyDataRoom() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var data = {\n    room: {\n      id: \"\",\n      name: \"\"\n    },\n    loggedUser: {\n      userId: \"\",\n      isAdmin: false,\n      username: \"\",\n      email: \"\"\n    },\n    questions: []\n  };\n  if (params === null) return data;\n  data.room.id = createId();\n  data.room.name = params.roomName;\n  data.loggedUser.userId = params.userId;\n  data.loggedUser.isAdmin = true;\n  data.loggedUser.username = params.username;\n  data.loggedUser.email = params.email;\n  return data;\n};\n\nvar createQuestionsItem = function createQuestionsItem(username, userId, content) {\n  return {\n    username: username,\n    userId: userId,\n    content: content,\n    isHandsUp: false,\n    time: Date.now()\n  };\n};\n\nvar newRoom = function newRoom(params) {\n  // return createEmptyDataRoom(params);\n  var db = getDatabase();\n  set(ref(db, 'rooms/' + roomId), {\n    roomName: roomName\n  });\n};\n\nvar deleteRoom = function deleteRoom() {\n  return createEmptyDataRoom();\n};\n\nvar changeUsername = function changeUsername(srcData, username, userId, callback) {\n  srcData.loggedUser.username = username;\n  srcData.questions = srcData.questions.map(function (item) {\n    if (item.userId == userId) item.username = username;\n    return item;\n  });\n  callback(srcData);\n};\n\nvar changeEmail = function changeEmail(srcData, email, userId, callback) {\n  srcData.loggedUser.email = email;\n  srcData.questions = srcData.questions.map(function (item) {\n    if (item.userId == userId) item.email = email;\n    return item;\n  });\n  callback(srcData);\n};\n\nvar pushQuestion = function pushQuestion(srcData, username, userId, content, callback) {\n  srcData.questions.push(createQuestionsItem(username, userId, content));\n  callback(srcData);\n};\n\nvar login = function login(callback) {\n  var provider = new GoogleAuthProvider(),\n      auth = getAuth();\n  signInWithPopup(auth, provider).then(function (result) {\n    return callback(result.user);\n  }).catch(function (error) {\n    return console.error(\"Error Code: \".concat(error.code, \"\\n\").concat(error.message));\n  });\n};\n\nexport default {\n  newRoom: newRoom,\n  deleteRoom: deleteRoom,\n  changeUsername: changeUsername,\n  changeEmail: changeEmail,\n  pushQuestion: pushQuestion,\n  login: login\n};","map":{"version":3,"sources":["F:/Dev/VueProjects/questions-room/src/services/firebase.js"],"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","getDatabase","ref","set","firebaseConfig","createId","s4","Math","random","toString","substring","createEmptyDataRoom","params","data","room","id","name","loggedUser","userId","isAdmin","username","email","questions","roomName","createQuestionsItem","content","isHandsUp","time","Date","now","newRoom","db","roomId","deleteRoom","changeUsername","srcData","callback","map","item","changeEmail","pushQuestion","push","login","provider","auth","then","result","user","catch","error","console","code","message"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\nimport { getDatabase, ref, set} from \"firebase/database\";\r\nimport firebaseConfig from \"./firebase-config\";\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nconst createId = () => {\r\n\tconst s4 = () => (((1 + Math.random()) * 0x10000)|0).toString(16).substring(1);\r\n\treturn s4() + s4() + \"-\" + s4() + s4() + s4() + s4();\r\n};\r\n\r\nconst createEmptyDataRoom = (params = null) => {\r\n\tconst data = {\r\n\t\troom: {\r\n\t\t\tid: \"\",\r\n\t\t\tname: \"\"\r\n\t\t},\r\n\t\tloggedUser: {\r\n\t\t\tuserId: \"\",\r\n\t\t\tisAdmin: false,\r\n\t\t\tusername: \"\",\r\n\t\t\temail: \"\"\r\n\t\t},\r\n\t\tquestions: []\r\n\t};\r\n\r\n\tif(params === null) return data;\r\n\r\n\tdata.room.id = createId();\r\n\tdata.room.name = params.roomName;\r\n\tdata.loggedUser.userId = params.userId;\r\n\tdata.loggedUser.isAdmin = true;\r\n\tdata.loggedUser.username = params.username;\r\n\tdata.loggedUser.email = params.email;\r\n\treturn data;\r\n};\r\n\r\nconst createQuestionsItem = (username, userId, content) => {\r\n\treturn {\r\n\t\tusername: username,\r\n\t\tuserId: userId,\r\n\t\tcontent: content,\r\n\t\tisHandsUp: false,\r\n\t\ttime: Date.now()\r\n\t};\r\n};\r\n\r\nconst newRoom = params => {\r\n\t// return createEmptyDataRoom(params);\r\n\tconst db = getDatabase();\r\n\tset(ref(db, 'rooms/' + roomId), {\r\n\t\troomName: roomName\r\n\t});\r\n};\r\n\r\nconst deleteRoom = () => {\r\n\treturn createEmptyDataRoom();\r\n};\r\n\r\nconst changeUsername = (srcData, username, userId, callback) => {\r\n\tsrcData.loggedUser.username = username;\r\n\tsrcData.questions = srcData.questions.map(item => {\r\n\t\tif(item.userId == userId) item.username = username;\r\n\t\treturn item;\r\n\t});\r\n\r\n\tcallback(srcData);\r\n};\r\n\r\nconst changeEmail = (srcData, email, userId, callback) => {\r\n\tsrcData.loggedUser.email = email;\r\n\tsrcData.questions = srcData.questions.map(item => {\r\n\t\tif(item.userId == userId) item.email = email;\r\n\t\treturn item;\r\n\t});\r\n\r\n\tcallback(srcData);\r\n};\r\n\r\nconst pushQuestion = (srcData, username, userId, content, callback) => {\r\n\tsrcData.questions.push(createQuestionsItem(username, userId, content));\r\n\tcallback(srcData);\r\n};\r\n\r\nconst login = callback => {\r\n\tconst provider = new GoogleAuthProvider(),\r\n\t\tauth = getAuth();\r\n\tsignInWithPopup(auth, provider)\r\n\t\t.then(result => callback(result.user))\r\n\t\t.catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\nexport default { newRoom, deleteRoom, changeUsername, changeEmail, pushQuestion, login };\r\n"]},"metadata":{},"sourceType":"module"}