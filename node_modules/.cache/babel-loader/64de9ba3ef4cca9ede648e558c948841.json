{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.replace-all.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport firebase from \"./services/firebase.js\";\nimport urlParams from \"./services/url-params.js\";\nimport myLocalStorage from \"./services/my-local-storage.js\";\nimport PanelUser from \"./components/PanelUser.vue\";\nimport PanelForum from \"./components/PanelForum.vue\";\nimport FormNewRoom from \"./components/FormNewRoom.vue\";\nimport FormLogin from \"./components/FormLogin.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    PanelUser: PanelUser,\n    PanelForum: PanelForum,\n    FormNewRoom: FormNewRoom,\n    FormLogin: FormLogin\n  },\n  data: function data() {\n    return {\n      hasRoom: false,\n      loginStatus: \"\",\n      room: {\n        id: \"\",\n        name: \"\"\n      },\n      loggedUser: {\n        userId: \"\",\n        isAdmin: false,\n        username: \"\",\n        email: \"\"\n      },\n      questions: []\n    };\n  },\n  methods: {\n    setData: function setData(data) {\n      this.room = data.room;\n      this.loggedUser = data.loggedUser;\n      this.questions = data.questions;\n    },\n    getData: function getData() {\n      return {\n        hasRoom: this.hasRoom,\n        loginStatus: this.loginStatus,\n        room: this.room,\n        loggedUser: this.loggedUser,\n        questions: this.questions\n      };\n    },\n    resetData: function resetData() {\n      this.hasRoom = this.loggedUser.isAdmin = false;\n      this.loginStatus = this.room.id = this.room.name = this.loggedUser.userId = this.loggedUser.username = this.loggedUser.email = \"\";\n      this.questions = [];\n    },\n    setHasRoom: function setHasRoom(val) {\n      this.hasRoom = Boolean(val);\n    },\n    login: function login() {\n      firebase.login(function (user) {\n        myLocalStorage.set({\n          loggedUser_userId: user.uid,\n          loggedUser_username: user.displayName.replaceAll(\" \", \"_\"),\n          loggedUser_email: user.email,\n          loggedUser_isAdmin: \"true\",\n          loginStatus: \"valid\"\n        });\n      });\n    },\n    changeEmail: function changeEmail() {\n      var _this = this;\n\n      firebase.logout(function () {\n        _this.login();\n      });\n    },\n    newRoom: function newRoom(roomName) {\n      var _this2 = this;\n\n      firebase.newRoom(roomName, function (res) {\n        var roomId = res.value.roomId,\n            roomName = res.value.roomName;\n        _this2.hasRoom = true;\n        myLocalStorage.set({\n          hasRoom: \"true\"\n        });\n        urlParams.set({\n          id: roomId,\n          name: roomName\n        });\n        res.onRoomDeleted(roomId, function () {\n          if (!_this2.loggedUser.isAdmin) alert(\"This room was no longer available\");\n\n          _this2.resetData();\n\n          myLocalStorage.remove([\"hasRoom\"]);\n          urlParams.delete([\"id\", \"name\"]);\n        });\n        res.onQuestionAdded(roomId, function (question) {\n          _this2.questions.push(question);\n        });\n        res.onQuestionRemoved(roomId, function (removedQuestionKey) {\n          var questionIndex = _this2.questions.findIndex(function (question) {\n            return question.key == removedQuestionKey;\n          });\n\n          if (questionIndex >= 0) _this2.questions.splice(questionIndex, 1);\n        });\n      });\n    },\n    closeRoom: function closeRoom() {\n      firebase.deleteRoom(this.room.id);\n    },\n    addQuestion: function addQuestion(content) {\n      var _this3 = this;\n\n      if (this.loggedUser.username.length < 1) this.loggedUser.username = \"Anonymous\";\n      firebase.pushQuestion(this.room.id, this.loggedUser.userId, this.loggedUser.username, content, function (res) {\n        res.onQuestionChildChanged(function (changedQuestion) {\n          var questionIndex = _this3.questions.findIndex(function (question) {\n            return question.key == changedQuestion.key;\n          });\n\n          if (questionIndex >= 0) _this3.questions[questionIndex] = changedQuestion;\n        });\n      });\n    },\n    changeUsername: function changeUsername(username) {\n      var _this4 = this;\n\n      var questionsKey = this.questions.filter(function (question) {\n        return question.userId == _this4.loggedUser.userId;\n      }).map(function (question) {\n        return question.key;\n      });\n      if (questionsKey.length > 0) firebase.changeUsername(this.room.id, questionsKey, username);\n    },\n    changeUsersHandsUp: function changeUsersHandsUp(questionKey, newVal) {\n      var _this5 = this;\n\n      if (newVal) {\n        firebase.addUsersHandsUp(this.room.id, questionKey, this.loggedUser.userId);\n        return;\n      }\n\n      var usersHandsUpInd = this.questions[questionKey].usersHandsUp.findIndex(function (user) {\n        return user.id == _this5.loggedUser.userId;\n      });\n\n      if (usersHandsUpInd >= 0 && !newVal) {\n        var usersHandsUpKey = this.questions[questionKey].usersHandsUp[usersHandsUpInd].key;\n        firebase.removeUsersHandsUp(this.room.id, questionKey, usersHandsUpKey);\n      }\n    },\n    toggleAdminMode: function toggleAdminMode() {\n      this.loggedUser.isAdmin = !this.loggedUser.isAdmin;\n    },\n    checkHasRoom: function checkHasRoom() {\n      var hasRoom = urlParams.has(\"id\") && urlParams.has(\"name\");\n      var localData = myLocalStorage.get([\"hasRoom\"]);\n      if (hasRoom && hasOwnProperty.call(localData, \"hasRoom\")) hasRoom = localData.hasRoom === \"true\";\n      if (hasRoom) this.hasRoom = hasRoom;else document.location.href = document.location.host;\n      return hasRoom;\n    },\n    checkLogin: function checkLogin() {\n      var localData = myLocalStorage.get([\"loggedUser_userId\", \"loggedUser_username\", \"loggedUser_email\", \"loggedUser_isAdmin\", \"loginStatus\"]);\n      if (hasOwnProperty.call(localData, \"loggedUser_userId\")) this.loggedUser.userId = localData.loggedUser_userId;\n      if (hasOwnProperty.call(localData, \"loggedUser_username\")) this.loggedUser.username = localData.loggedUser_username;\n      if (hasOwnProperty.call(localData, \"loggedUser_username\")) this.loggedUser.email = localData.loggedUser_email;\n      if (hasOwnProperty.call(localData, \"loggedUser_isAdmin\")) this.loggedUser.isAdmin = localData.loggedUser_isAdmin === \"true\";\n      if (hasOwnProperty.call(localData, \"loginStatus\")) this.loginStatus = localData.loginStatus;\n    },\n    test: function test() {\n      alert(\"Test success!\");\n    }\n  },\n  beforeMount: function beforeMount() {\n    var _this6 = this;\n\n    var room = urlParams.get([\"id\", \"name\"]);\n    if (room.id !== null) this.room.id = room.id;\n    if (room.name !== null) this.room.name = room.name;\n    var hasRoomUrl = room.id !== null && room.name !== null;\n\n    if (hasRoomUrl && this.checkHasRoom()) {\n      firebase.loadAllQuestionOnce(this.room.id, function (res) {\n        _this6.questions = res.questions;\n        res.onRoomDeleted(_this6.room.id, function () {\n          if (!_this6.loggedUser.isAdmin) alert(\"This room was no longer available\");\n\n          _this6.resetData();\n\n          myLocalStorage.remove([\"hasRoom\"]);\n          urlParams.delete([\"id\", \"name\"]);\n        });\n        res.onQuestionAdded(_this6.room.id, function (question) {\n          _this6.questions.push(question);\n\n          console.log(\"is run\");\n        });\n        res.onQuestionRemoved(_this6.room.id, function (removedQuestionKey) {\n          var questionIndex = _this6.questions.findIndex(function (question) {\n            return question.key == removedQuestionKey;\n          });\n\n          if (questionIndex >= 0) _this6.questions.splice(questionIndex, 1);\n        });\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.checkLogin();\n    if (this.loggedUser.email === null) this.loginStatus = \"\";\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACAA,aADA;AAEAC;AACAC,wBADA;AAEAC,0BAFA;AAGAC,4BAHA;AAIAC;AAJA,GAFA;AAQAC,MARA,kBAQA;AACA;AACAC,oBADA;AAEAC,qBAFA;AAGAC;AACAC,cADA;AAEAV;AAFA,OAHA;AAOAW;AACAC,kBADA;AAEAC,sBAFA;AAGAC,oBAHA;AAIAC;AAJA,OAPA;AAaAC;AAbA;AAeA,GAxBA;AAyBAC;AACAC,WADA,mBACAZ,IADA,EACA;AACA;AACA;AACA;AACA,KALA;AAMAa,WANA,qBAMA;AACA;AACAZ,6BADA;AAEAC,qCAFA;AAGAC,uBAHA;AAIAE,mCAJA;AAKAK;AALA;AAOA,KAdA;AAeAI,aAfA,uBAeA;AACA;AACA;AACA;AACA,KAnBA;AAoBAC,cApBA,sBAoBAC,GApBA,EAoBA;AACA;AACA,KAtBA;AAuBAC,SAvBA,mBAuBA;AACAC;AACAC;AACAC,qCADA;AAEAC,oEAFA;AAGAC,sCAHA;AAIAC,oCAJA;AAKArB;AALA;AAOA,OARA;AASA,KAjCA;AAkCAsB,eAlCA,yBAkCA;AAAA;;AACAN;AACA;AACA,OAFA;AAGA,KAtCA;AAuCAO,WAvCA,mBAuCAC,QAvCA,EAuCA;AAAA;;AACAR;AACA;AAAA,YACAQ,6BADA;AAGA;AACAP;AAAAlB;AAAA;AACA0B;AACAvB,oBADA;AAEAV;AAFA;AAKAkC;AACA,0CACAC;;AAEA;;AACAV;AACAQ;AACA,SAPA;AASAC;AACA;AACA,SAFA;AAIAA;AACA;AAAA;AAAA;;AACA,kCACA;AACA,SAJA;AAKA,OA7BA;AA8BA,KAtEA;AAuEAE,aAvEA,uBAuEA;AACAZ;AACA,KAzEA;AA0EAa,eA1EA,uBA0EAC,OA1EA,EA0EA;AAAA;;AACA,+CACA;AACAd;AACAU;AACA;AAAA;AAAA;;AACA,kCACA;AACA,SAJA;AAOA,OARA;AASA,KAtFA;AAuFAK,kBAvFA,0BAuFAzB,QAvFA,EAuFA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA,mCACAU;AACA,KA3FA;AA4FAgB,sBA5FA,8BA4FAC,WA5FA,EA4FAC,MA5FA,EA4FA;AAAA;;AACA;AACAlB;AACA;AACA;;AAEA;AAAA;AAAA;;AACA;AACA;AACAA;AACA;AACA,KAvGA;AAwGAmB,mBAxGA,6BAwGA;AACA;AACA,KA1GA;AA2GAC,gBA3GA,0BA2GA;AACA;AAEA;AACA,gEACArC;AAEA,+CACAsC;AAEA;AACA,KAtHA;AAuHAC,cAvHA,wBAuHA;AACA;AAEA,+DACA;AACA,iEACA;AACA,iEACA;AACA,gEACA;AACA,yDACA;AACA,KApIA;AAqIAC,QArIA,kBAqIA;AACAZ;AACA;AAvIA,GAzBA;AAkKAa,aAlKA,yBAkKA;AAAA;;AACA;AAEA,0BACA;AACA,4BACA;AAEA;;AACA;AACAxB;AACA;AAEAU;AACA,0CACAC;;AAEA;;AACAV;AACAQ;AACA,SAPA;AASAC;AACA;;AACAe;AACA,SAHA;AAKAf;AACA;AAAA;AAAA;;AACA,kCACA;AACA,SAJA;AAKA,OAtBA;AAuBA;AACA,GApMA;AAqMAgB,SArMA,qBAqMA;AACA;AACA,wCACA;AACA;AAzMA","names":["name","components","PanelUser","PanelForum","FormNewRoom","FormLogin","data","hasRoom","loginStatus","room","id","loggedUser","userId","isAdmin","username","email","questions","methods","setData","getData","resetData","setHasRoom","val","login","firebase","myLocalStorage","loggedUser_userId","loggedUser_username","loggedUser_email","loggedUser_isAdmin","changeEmail","newRoom","roomName","urlParams","res","alert","closeRoom","addQuestion","content","changeUsername","changeUsersHandsUp","questionKey","newVal","toggleAdminMode","checkHasRoom","document","checkLogin","test","beforeMount","console","mounted"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\r\n\t<div id=\"app\" class=\"container-lg\">\r\n\t\t<div v-if=\"hasRoom\" class=\"panel-wrapper\">\r\n\t\t\t<PanelUser :userId=\"loggedUser.userId\" :isAdmin=\"loggedUser.isAdmin\" :username=\"loggedUser.username\" :email=\"loggedUser.email\" />\r\n\t\t\t<PanelForum :forumName=\"room.name\" :questions=\"questions\" :loggedUserId=\"loggedUser.userId\" />\r\n\t\t</div>\r\n\t\t<FormNewRoom v-else />\r\n\t\t<FormLogin v-if=\"loginStatus != 'valid'\" />\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nimport firebase from \"./services/firebase.js\";\r\nimport urlParams from \"./services/url-params.js\";\r\nimport myLocalStorage from \"./services/my-local-storage.js\";\r\n\r\nimport PanelUser from \"./components/PanelUser.vue\";\r\nimport PanelForum from \"./components/PanelForum.vue\";\r\nimport FormNewRoom from \"./components/FormNewRoom.vue\";\r\nimport FormLogin from \"./components/FormLogin.vue\";\r\n\r\nexport default {\r\n\tname: \"App\",\r\n\tcomponents: {\r\n\t\tPanelUser,\r\n\t\tPanelForum,\r\n\t\tFormNewRoom,\r\n\t\tFormLogin\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\thasRoom: false,\r\n\t\t\tloginStatus: \"\",\r\n\t\t\troom: {\r\n\t\t\t\tid: \"\",\r\n\t\t\t\tname: \"\"\r\n\t\t\t},\r\n\t\t\tloggedUser: {\r\n\t\t\t\tuserId: \"\",\r\n\t\t\t\tisAdmin: false,\r\n\t\t\t\tusername: \"\",\r\n\t\t\t\temail: \"\"\r\n\t\t\t},\r\n\t\t\tquestions: []\r\n\t\t};\r\n\t},\r\n\tmethods: {\r\n\t\tsetData(data){\r\n\t\t\tthis.room = data.room;\r\n\t\t\tthis.loggedUser = data.loggedUser;\r\n\t\t\tthis.questions = data.questions;\r\n\t\t},\r\n\t\tgetData(){\r\n\t\t\treturn {\r\n\t\t\t\thasRoom: this.hasRoom,\r\n\t\t\t\tloginStatus: this.loginStatus,\r\n\t\t\t\troom: this.room,\r\n\t\t\t\tloggedUser: this.loggedUser,\r\n\t\t\t\tquestions: this.questions\r\n\t\t\t};\r\n\t\t},\r\n\t\tresetData(){\r\n\t\t\tthis.hasRoom = this.loggedUser.isAdmin = false;\r\n\t\t\tthis.loginStatus = this.room.id = this.room.name = this.loggedUser.userId = this.loggedUser.username = this.loggedUser.email = \"\" ;\r\n\t\t\tthis.questions = [];\r\n\t\t},\r\n\t\tsetHasRoom(val){\r\n\t\t\tthis.hasRoom = Boolean(val);\r\n\t\t},\r\n\t\tlogin(){\r\n\t\t\tfirebase.login(user => {\r\n\t\t\t\tmyLocalStorage.set({\r\n\t\t\t\t\tloggedUser_userId: user.uid,\r\n\t\t\t\t\tloggedUser_username: user.displayName.replaceAll(\" \", \"_\"),\r\n\t\t\t\t\tloggedUser_email: user.email,\r\n\t\t\t\t\tloggedUser_isAdmin: \"true\",\r\n\t\t\t\t\tloginStatus: \"valid\"\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\tchangeEmail(){\r\n\t\t\tfirebase.logout(() => {\r\n\t\t\t\tthis.login();\r\n\t\t\t});\r\n\t\t},\r\n\t\tnewRoom(roomName){\r\n\t\t\tfirebase.newRoom(roomName, res => {\r\n\t\t\t\tconst roomId = res.value.roomId,\r\n\t\t\t\t\troomName = res.value.roomName;\r\n\r\n\t\t\t\tthis.hasRoom = true;\r\n\t\t\t\tmyLocalStorage.set({ hasRoom: \"true\" });\r\n\t\t\t\turlParams.set({\r\n\t\t\t\t\tid: roomId,\r\n\t\t\t\t\tname: roomName\r\n\t\t\t\t});\r\n\r\n\t\t\t\tres.onRoomDeleted(roomId, () => {\r\n\t\t\t\t\tif(!this.loggedUser.isAdmin)\r\n\t\t\t\t\t\talert(\"This room was no longer available\");\r\n\r\n\t\t\t\t\tthis.resetData();\r\n\t\t\t\t\tmyLocalStorage.remove([\"hasRoom\"]);\r\n\t\t\t\t\turlParams.delete([\"id\", \"name\"]);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tres.onQuestionAdded(roomId, question => {\r\n\t\t\t\t\tthis.questions.push(question);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tres.onQuestionRemoved(roomId, removedQuestionKey => {\r\n\t\t\t\t\tconst questionIndex = this.questions.findIndex(question => question.key == removedQuestionKey);\r\n\t\t\t\t\tif(questionIndex >= 0)\r\n\t\t\t\t\t\tthis.questions.splice(questionIndex, 1);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\tcloseRoom(){\r\n\t\t\tfirebase.deleteRoom(this.room.id);\r\n\t\t},\r\n\t\taddQuestion(content){\r\n\t\t\tif(this.loggedUser.username.length < 1)\r\n\t\t\t\tthis.loggedUser.username = \"Anonymous\";\r\n\t\t\tfirebase.pushQuestion(this.room.id, this.loggedUser.userId, this.loggedUser.username, content, res => {\r\n\t\t\t\tres.onQuestionChildChanged(changedQuestion => {\r\n\t\t\t\t\tconst questionIndex = this.questions.findIndex(question => question.key == changedQuestion.key);\r\n\t\t\t\t\tif(questionIndex >= 0)\r\n\t\t\t\t\t\tthis.questions[questionIndex] = changedQuestion;\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t});\r\n\t\t},\r\n\t\tchangeUsername(username){\r\n\t\t\tconst questionsKey = this.questions.filter(question => question.userId == this.loggedUser.userId).map(question => question.key);\r\n\t\t\tif(questionsKey.length > 0)\r\n\t\t\t\tfirebase.changeUsername(this.room.id, questionsKey, username);\r\n\t\t},\r\n\t\tchangeUsersHandsUp(questionKey, newVal){\r\n\t\t\tif(newVal){\r\n\t\t\t\tfirebase.addUsersHandsUp(this.room.id, questionKey, this.loggedUser.userId);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst usersHandsUpInd = this.questions[questionKey].usersHandsUp.findIndex(user => user.id == this.loggedUser.userId);\r\n\t\t\tif(usersHandsUpInd >= 0 && !newVal){\r\n\t\t\t\tconst usersHandsUpKey = this.questions[questionKey].usersHandsUp[usersHandsUpInd].key;\r\n\t\t\t\tfirebase.removeUsersHandsUp(this.room.id, questionKey, usersHandsUpKey);\r\n\t\t\t}\r\n\t\t},\r\n\t\ttoggleAdminMode(){\r\n\t\t\tthis.loggedUser.isAdmin = !this.loggedUser.isAdmin;\r\n\t\t},\r\n\t\tcheckHasRoom(){\r\n\t\t\tlet hasRoom = urlParams.has(\"id\") && urlParams.has(\"name\");\r\n\r\n\t\t\tconst localData = myLocalStorage.get([\"hasRoom\"]);\r\n\t\t\tif(hasRoom && hasOwnProperty.call(localData, \"hasRoom\"))\r\n\t\t\t\thasRoom = localData.hasRoom === \"true\";\r\n\r\n\t\t\tif(hasRoom) this.hasRoom = hasRoom;\r\n\t\t\telse document.location.href = document.location.host;\r\n\r\n\t\t\treturn hasRoom;\r\n\t\t},\r\n\t\tcheckLogin(){\r\n\t\t\tconst localData = myLocalStorage.get([\"loggedUser_userId\", \"loggedUser_username\", \"loggedUser_email\", \"loggedUser_isAdmin\", \"loginStatus\"]);\r\n\r\n\t\t\tif(hasOwnProperty.call(localData, \"loggedUser_userId\"))\r\n\t\t\t\tthis.loggedUser.userId = localData.loggedUser_userId;\r\n\t\t\tif(hasOwnProperty.call(localData, \"loggedUser_username\"))\r\n\t\t\t\tthis.loggedUser.username = localData.loggedUser_username;\r\n\t\t\tif(hasOwnProperty.call(localData, \"loggedUser_username\"))\r\n\t\t\t\tthis.loggedUser.email = localData.loggedUser_email;\r\n\t\t\tif(hasOwnProperty.call(localData, \"loggedUser_isAdmin\"))\r\n\t\t\t\tthis.loggedUser.isAdmin = localData.loggedUser_isAdmin === \"true\";\r\n\t\t\tif(hasOwnProperty.call(localData, \"loginStatus\"))\r\n\t\t\t\tthis.loginStatus = localData.loginStatus;\r\n\t\t},\r\n\t\ttest(){\r\n\t\t\talert(\"Test success!\");\r\n\t\t}\r\n\t},\r\n\tbeforeMount(){\r\n\t\tconst room = urlParams.get([\"id\", \"name\"]);\r\n\r\n\t\tif(room.id !== null)\r\n\t\t\tthis.room.id = room.id;\r\n\t\tif(room.name !== null)\r\n\t\t\tthis.room.name = room.name;\r\n\r\n\t\tconst hasRoomUrl = room.id !== null && room.name !== null;\r\n\t\tif(hasRoomUrl && this.checkHasRoom()){\r\n\t\t\tfirebase.loadAllQuestionOnce(this.room.id, res => {\r\n\t\t\t\tthis.questions = res.questions;\r\n\r\n\t\t\t\tres.onRoomDeleted(this.room.id, () => {\r\n\t\t\t\t\tif(!this.loggedUser.isAdmin)\r\n\t\t\t\t\t\talert(\"This room was no longer available\");\r\n\r\n\t\t\t\t\tthis.resetData();\r\n\t\t\t\t\tmyLocalStorage.remove([\"hasRoom\"]);\r\n\t\t\t\t\turlParams.delete([\"id\", \"name\"]);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tres.onQuestionAdded(this.room.id, question => {\r\n\t\t\t\t\tthis.questions.push(question);\r\n\t\t\t\t\tconsole.log(\"is run\");\r\n\t\t\t\t});\r\n\r\n\t\t\t\tres.onQuestionRemoved(this.room.id, removedQuestionKey => {\r\n\t\t\t\t\tconst questionIndex = this.questions.findIndex(question => question.key == removedQuestionKey);\r\n\t\t\t\t\tif(questionIndex >= 0)\r\n\t\t\t\t\t\tthis.questions.splice(questionIndex, 1);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\tmounted(){\r\n\t\tthis.checkLogin();\r\n\t\tif(this.loggedUser.email === null)\r\n\t\t\tthis.loginStatus = \"\";\r\n\t}\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}