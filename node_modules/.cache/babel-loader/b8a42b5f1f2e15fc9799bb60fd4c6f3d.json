{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, signOut, GoogleAuthProvider } from \"firebase/auth\";\nimport { getDatabase, ref, push, set, update, onValue, onChildRemoved } from \"firebase/database\";\nimport firebaseConfig from \"./firebase-config\";\ninitializeApp(firebaseConfig);\n\nconst dateToTimeString = date => {\n  let hours = date.getHours().toString(),\n      minutes = date.getMinutes().toString();\n  if (hours.length < 2) hours = \"0\" + hours;\n  if (minutes.length < 2) minutes = \"0\" + minutes;\n  return hours + \".\" + minutes;\n};\n\nconst getMainRef = path => {\n  const db = getDatabase();\n  return ref(db, path);\n};\n\nconst login = callback => {\n  const provider = new GoogleAuthProvider(),\n        auth = getAuth();\n  provider.setCustomParameters({\n    prompt: \"select_account\"\n  });\n  signInWithPopup(auth, provider).then(result => callback(result.user)).catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\n};\n\nconst logout = callback => {\n  const auth = getAuth();\n  signOut(auth).then(callback);\n};\n\nconst newRoom = (roomName, callback) => {\n  const newRoomRef = push(getMainRef(\"rooms\"));\n  const value = {\n    roomId: newRoomRef.key,\n    roomName\n  };\n  set(newRoomRef, {\n    roomName\n  }).then(() => callback(value)).catch(error => console.log(`Firebase error code: ${error.code}\\n${error.message}`));\n};\n\nconst deleteRoom = roomId => {\n  const delRoomRef = getMainRef(\"rooms/\" + roomId);\n  set(delRoomRef, null);\n};\n\nconst pushQuestion = (roomId, userId, username, content) => {\n  const newQuestionRef = push(getMainRef(`rooms/${roomId}/questions`));\n  const time = Date.now();\n  set(newQuestionRef, {\n    userId,\n    username,\n    content,\n    time\n  });\n};\n\nconst addUsersHandsUp = (roomId, questionKey, userId) => {\n  const newUsersHandsUpRef = push(getMainRef(`rooms/${roomId}/questions/${questionKey}/usersHandsUp`));\n  set(newUsersHandsUpRef, userId);\n};\n\nconst removeUsersHandsUp = (roomId, questionKey, usersHandsUpKey) => {\n  const delUsersHandsUpRef = getMainRef(`rooms/${roomId}/questions/${questionKey}/usersHandsUp/${usersHandsUpKey}`);\n  set(delUsersHandsUpRef, null);\n};\n\nconst changeUsername = (roomId, questionsKey, username, callback) => {\n  const roomsRef = getMainRef(\"rooms/\" + roomId);\n  let updates = {};\n  questionsKey.forEach(questionKey => {\n    updates[\"/questions/\" + questionKey + \"/username\"] = username;\n  });\n  update(roomsRef, updates).then(() => {\n    callback();\n  });\n};\n\nconst loadAllQuestion = (roomId, callback) => {\n  const roomsRef = getMainRef(\"rooms/\" + roomId + \"/questions\");\n  onValue(roomsRef, snapshot => {\n    let questions = [];\n    snapshot.forEach(childSnapshot => {\n      const key = childSnapshot.key;\n      let {\n        userId,\n        username,\n        content,\n        usersHandsUp,\n        time\n      } = childSnapshot.val();\n      let tempArr = [];\n      if (usersHandsUp) Object.entries(usersHandsUp).forEach(([key, userId]) => tempArr.push({\n        key,\n        userId\n      }));\n      usersHandsUp = tempArr;\n      const timeObj = new Date(time);\n      time = dateToTimeString(timeObj);\n      questions.push({\n        key,\n        userId,\n        username,\n        content,\n        usersHandsUp,\n        time\n      });\n    });\n\n    const onRoomDeleted = (roomId, callback) => {\n      const roomsRef = getMainRef(\"rooms\");\n      onChildRemoved(roomsRef, snapshot => {\n        if (snapshot.key == roomId) callback();\n      });\n    };\n\n    callback({\n      questions,\n      onRoomDeleted\n    });\n  });\n};\n/*const events = {\r\n\tonRoomDeleted: (roomId, callback) => {\r\n\t\tconst roomsRef = getMainRef(\"rooms\");\r\n\t\tonChildRemoved(roomsRef, snapshot => {\r\n\t\t\tif(snapshot.key == roomId) callback();\r\n\t\t})\r\n\t}\r\n};*/\n\n\nexport default {\n  login,\n  logout,\n  newRoom,\n  deleteRoom,\n  loadAllQuestion,\n  pushQuestion,\n  addUsersHandsUp,\n  removeUsersHandsUp,\n  changeUsername\n};","map":{"version":3,"sources":["F:/Dev/VueProjects/questions-room/src/services/firebase.js"],"names":["initializeApp","getAuth","signInWithPopup","signOut","GoogleAuthProvider","getDatabase","ref","push","set","update","onValue","onChildRemoved","firebaseConfig","dateToTimeString","date","hours","getHours","toString","minutes","getMinutes","length","getMainRef","path","db","login","callback","provider","auth","setCustomParameters","prompt","then","result","user","catch","error","console","code","message","logout","newRoom","roomName","newRoomRef","value","roomId","key","log","deleteRoom","delRoomRef","pushQuestion","userId","username","content","newQuestionRef","time","Date","now","addUsersHandsUp","questionKey","newUsersHandsUpRef","removeUsersHandsUp","usersHandsUpKey","delUsersHandsUpRef","changeUsername","questionsKey","roomsRef","updates","forEach","loadAllQuestion","snapshot","questions","childSnapshot","usersHandsUp","val","tempArr","Object","entries","timeObj","onRoomDeleted"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, signInWithPopup, signOut, GoogleAuthProvider } from \"firebase/auth\";\r\nimport { getDatabase, ref, push, set, update, onValue, onChildRemoved } from \"firebase/database\";\r\nimport firebaseConfig from \"./firebase-config\";\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nconst dateToTimeString = date => {\r\n\tlet hours = date.getHours().toString(),\r\n\t\tminutes = date.getMinutes().toString();\r\n\r\n\tif(hours.length < 2) hours = \"0\" + hours;\r\n\tif(minutes.length < 2) minutes = \"0\" + minutes;\r\n\r\n\treturn hours + \".\" + minutes;\r\n};\r\n\r\nconst getMainRef = path => {\r\n\tconst db = getDatabase();\r\n\treturn ref(db, path);\r\n};\r\n\r\nconst login = callback => {\r\n\tconst provider = new GoogleAuthProvider(),\r\n\t\tauth = getAuth();\r\n\r\n\tprovider.setCustomParameters({\r\n\t\tprompt: \"select_account\"\r\n\t});\r\n\r\n\tsignInWithPopup(auth, provider)\r\n\t\t.then(result => callback(result.user))\r\n\t\t.catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\nconst logout = callback => {\r\n\tconst auth = getAuth();\r\n\tsignOut(auth).then(callback);\r\n};\r\n\r\nconst newRoom = (roomName, callback) => {\r\n\tconst newRoomRef = push(getMainRef(\"rooms\"));\r\n\tconst value = { roomId: newRoomRef.key, roomName };\r\n\r\n\tset(newRoomRef, { roomName })\r\n\t\t.then(() => callback(value))\r\n\t\t.catch(error => console.log(`Firebase error code: ${error.code}\\n${error.message}`));\r\n\t\t\t\r\n};\r\n\r\nconst deleteRoom = roomId => {\r\n\tconst delRoomRef = getMainRef(\"rooms/\" + roomId);\r\n\tset(delRoomRef, null);\r\n};\r\n\r\nconst pushQuestion = (roomId, userId, username, content) => {\r\n\tconst newQuestionRef = push(getMainRef(`rooms/${roomId}/questions`));\r\n\tconst time = Date.now();\r\n\r\n\tset(newQuestionRef, { userId, username, content, time });\r\n};\r\n\r\nconst addUsersHandsUp = (roomId, questionKey, userId) => {\r\n\tconst newUsersHandsUpRef = push(getMainRef(`rooms/${roomId}/questions/${questionKey}/usersHandsUp`));\r\n\tset(newUsersHandsUpRef, userId);\r\n};\r\n\r\nconst removeUsersHandsUp = (roomId, questionKey, usersHandsUpKey) => {\r\n\tconst delUsersHandsUpRef = getMainRef(`rooms/${roomId}/questions/${questionKey}/usersHandsUp/${usersHandsUpKey}`);\r\n\tset(delUsersHandsUpRef, null);\r\n};\r\n\r\nconst changeUsername = (roomId, questionsKey, username, callback) => {\r\n\tconst roomsRef = getMainRef(\"rooms/\" + roomId);\r\n\tlet updates = {};\r\n\tquestionsKey.forEach(questionKey => {\r\n\t\tupdates[\"/questions/\" + questionKey + \"/username\"] = username;\r\n\t});\r\n\r\n\tupdate(roomsRef, updates).then(() => {\r\n\t\tcallback();\r\n\t});\r\n};\r\n\r\nconst loadAllQuestion = (roomId, callback) => {\r\n\tconst roomsRef = getMainRef(\"rooms/\" + roomId + \"/questions\");\r\n\tonValue(roomsRef, snapshot => {\r\n\t\tlet questions = [];\r\n\t\tsnapshot.forEach(childSnapshot => {\r\n\t\t\tconst key = childSnapshot.key;\r\n\t\t\tlet { userId, username, content, usersHandsUp, time } = childSnapshot.val();\r\n\r\n\t\t\tlet tempArr = [];\r\n\t\t\tif(usersHandsUp)\r\n\t\t\t\tObject.entries(usersHandsUp).forEach(([key, userId]) => tempArr.push({ key, userId }));\r\n\t\t\tusersHandsUp = tempArr;\r\n\r\n\t\t\tconst timeObj = new Date(time);\r\n\t\t\ttime = dateToTimeString(timeObj);\r\n\r\n\t\t\tquestions.push({ key, userId, username, content, usersHandsUp, time });\r\n\t\t});\r\n\r\n\t\tconst onRoomDeleted = (roomId, callback) => {\r\n\t\t\tconst roomsRef = getMainRef(\"rooms\");\r\n\t\t\tonChildRemoved(roomsRef, snapshot => {\r\n\t\t\t\tif(snapshot.key == roomId) callback();\r\n\t\t\t})\r\n\t\t};\r\n\r\n\t\tcallback({ questions, onRoomDeleted });\r\n\t});\r\n};\r\n\r\n/*const events = {\r\n\tonRoomDeleted: (roomId, callback) => {\r\n\t\tconst roomsRef = getMainRef(\"rooms\");\r\n\t\tonChildRemoved(roomsRef, snapshot => {\r\n\t\t\tif(snapshot.key == roomId) callback();\r\n\t\t})\r\n\t}\r\n};*/\r\n\r\nexport default {\r\n\tlogin,\r\n\tlogout,\r\n\tnewRoom,\r\n\tdeleteRoom,\r\n\tloadAllQuestion,\r\n\tpushQuestion,\r\n\taddUsersHandsUp,\r\n\tremoveUsersHandsUp,\r\n\tchangeUsername\r\n};\r\n"]},"metadata":{},"sourceType":"module"}