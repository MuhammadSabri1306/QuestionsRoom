{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { getDatabase, ref, push, set, query, orderByChild, onChildChanged } from \"firebase/database\";\nimport firebaseConfig from \"./firebase-config\";\ninitializeApp(firebaseConfig);\n\nvar dateToTimeString = function dateToTimeString(date) {\n  var hours = date.getHours().toString(),\n      minutes = date.getMinutes().toString();\n  if (hours.length < 2) hours = \"0\" + hours;\n  if (minutes.length < 2) minutes = \"0\" + minutes;\n  return hours + \".\" + minutes;\n};\n\nvar login = function login(callback) {\n  var provider = new GoogleAuthProvider(),\n      auth = getAuth();\n  signInWithPopup(auth, provider).then(function (result) {\n    return callback(result.user);\n  }).catch(function (error) {\n    return console.error(\"Error Code: \".concat(error.code, \"\\n\").concat(error.message));\n  });\n};\n\nvar newRoom = function newRoom(roomName, callback) {\n  var db = getDatabase();\n  var roomsListRef = ref(db, \"rooms\");\n  var newRoomPush = push(roomsListRef);\n  set(newRoomPush, {\n    roomName: roomName\n  }).then(function () {\n    callback({\n      id: newRoomPush.key,\n      name: roomName\n    });\n  });\n};\n\nvar deleteRoom = function deleteRoom(roomId, callback) {\n  var db = getDatabase();\n  set(ref(db, \"rooms/\" + roomId), null).then(callback).catch(function (error) {\n    return console.error(\"Error Code: \".concat(error.code, \"\\n\").concat(error.message));\n  });\n};\n/*const getRoomQuestions = (roomId, loggedUserId, callback) => {\r\n\tconst db = getDatabase();\r\n\tconst questionsRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\tconst orderedQuestionsQuery = query(questionsRef, orderByChild(\"time\"));\r\n\r\n\tonValue(orderedQuestionsQuery, snapshot => {\r\n\t\tif(!snapshot.exists()){\r\n\t\t\tconsole.log(\"No one questions yet!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet questions = [];\r\n\t\tsnapshot.forEach(childSnapshot => {\r\n\t\t\tconst key = childSnapshot.key;\r\n\t\t\tlet { userId, username, content, usersHandsUp, time } = childSnapshot.val();\r\n\t\t\tconsole.log(childSnapshot);\r\n\r\n\t\t\tconst isHandsUp = usersHandsUp && Object.keys(usersHandsUp).indexOf(loggedUserId) >= 0;\r\n\t\t\tconst timeObj = new Date(time);\r\n\t\t\ttime = dateToTimeString(timeObj);\r\n\r\n\t\t\tquestions.push({ key, userId, username, content, isHandsUp, time });\r\n\t\t});\r\n\r\n\t\tcallback(questions);\r\n\t}, {\r\n\t\tonlyOnce: true\r\n\t});\r\n};*/\n\n\nvar pushQuestion = function pushQuestion(roomId, userId, username, content) {\n  var db = getDatabase(),\n      time = Date.now();\n  var questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\n  var newQuestionQuery = push(questionsListRef);\n  set(newQuestionQuery, {\n    userId: userId,\n    username: username,\n    content: content,\n    time: time\n  });\n};\n\nvar events = {\n  onQuestionListChanged: function onQuestionListChanged(roomId, loggedUserId, callback) {\n    var db = getDatabase();\n    var questionsRef = ref(db, \"rooms/\" + roomId + \"/questions\");\n    var orderedQuestionsQuery = query(questionsRef, orderByChild(\"time\"));\n    onChildChanged(orderedQuestionsQuery, function (snapshot) {\n      if (!snapshot.exists()) {\n        callback([]);\n        return;\n      }\n\n      var questions = [];\n      snapshot.forEach(function (childSnapshot) {\n        var key = childSnapshot.key;\n\n        var _childSnapshot$val = childSnapshot.val(),\n            userId = _childSnapshot$val.userId,\n            username = _childSnapshot$val.username,\n            content = _childSnapshot$val.content,\n            usersHandsUp = _childSnapshot$val.usersHandsUp,\n            time = _childSnapshot$val.time;\n\n        console.log(childSnapshot);\n        var isHandsUp = usersHandsUp && Object.keys(usersHandsUp).indexOf(loggedUserId) >= 0;\n        var timeObj = new Date(time);\n        time = dateToTimeString(timeObj);\n        questions.push({\n          key: key,\n          userId: userId,\n          username: username,\n          content: content,\n          isHandsUp: isHandsUp,\n          time: time\n        });\n      });\n      callback(questions);\n    });\n  }\n};\n/*const changeUsername = (roomId, loggedUserId, username, callback) => {\r\n\tconst db = getDatabase();\r\n\tonValue(ref(db, \"rooms/\" + roomId + \"/questions\"), snapshot => {\r\n\t\tif(!snapshot.exists()){\r\n\t\t\tconsole.log(\"No one questions yet!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet updates = {};\r\n\t\tObject.entries(snapshot.val()).forEach(snapshotItem => {\r\n\t\t\tconst [key, item] = snapshotItem;\r\n\t\t\t\r\n\t\t\tif(item.userId == loggedUserId)\r\n\t\t\t\tupdates[\"/questions/\" + key + \"/username\"] = username;\r\n\t\t\tif(item.usersHandsUp && Object.keys(item.usersHandsUp).indexOf(loggedUserId) >= 0)\r\n\t\t\t\tupdates[\"/questions/\" + item.key + \"/usersHandsUp/\" + loggedUserId] = username;\r\n\t\t});\r\n\t\t// update(ref(db), updates) return Promise\r\n\t\tupdate(ref(db, \"rooms/\" + roomId), updates).then(() => {\r\n\t\t\tgetRoomQuestions(roomId, loggedUserId, callback);\r\n\t\t});\r\n\t});\r\n};*/\n\nexport default {\n  login: login,\n  newRoom: newRoom,\n  deleteRoom: deleteRoom,\n  pushQuestion: pushQuestion,\n  events: events\n};","map":{"version":3,"sources":["F:/Dev/VueProjects/questions-room/src/services/firebase.js"],"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","getDatabase","ref","push","set","query","orderByChild","onChildChanged","firebaseConfig","dateToTimeString","date","hours","getHours","toString","minutes","getMinutes","length","login","callback","provider","auth","then","result","user","catch","error","console","code","message","newRoom","roomName","db","roomsListRef","newRoomPush","id","key","name","deleteRoom","roomId","pushQuestion","userId","username","content","time","Date","now","questionsListRef","newQuestionQuery","events","onQuestionListChanged","loggedUserId","questionsRef","orderedQuestionsQuery","snapshot","exists","questions","forEach","childSnapshot","val","usersHandsUp","log","isHandsUp","Object","keys","indexOf","timeObj"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\nimport { getDatabase, ref, push, set, query, orderByChild, onChildChanged } from \"firebase/database\";\r\nimport firebaseConfig from \"./firebase-config\";\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nconst dateToTimeString = date => {\r\n\tlet hours = date.getHours().toString(),\r\n\t\tminutes = date.getMinutes().toString();\r\n\r\n\tif(hours.length < 2) hours = \"0\" + hours;\r\n\tif(minutes.length < 2) minutes = \"0\" + minutes;\r\n\r\n\treturn hours + \".\" + minutes;\r\n};\r\n\r\nconst login = callback => {\r\n\tconst provider = new GoogleAuthProvider(),\r\n\t\tauth = getAuth();\r\n\tsignInWithPopup(auth, provider)\r\n\t\t.then(result => callback(result.user))\r\n\t\t.catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\nconst newRoom = (roomName, callback) => {\r\n\tconst db = getDatabase();\r\n\tconst roomsListRef = ref(db, \"rooms\");\r\n\tconst newRoomPush = push(roomsListRef);\r\n\r\n\tset(newRoomPush, { roomName }).then(() => {\r\n\t\tcallback({ id: newRoomPush.key, name: roomName });\r\n\t});\r\n};\r\n\r\nconst deleteRoom = (roomId, callback) => {\r\n\tconst db = getDatabase();\r\n\tset(ref(db, \"rooms/\" + roomId), null)\r\n\t\t.then(callback)\r\n\t\t.catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\n/*const getRoomQuestions = (roomId, loggedUserId, callback) => {\r\n\tconst db = getDatabase();\r\n\tconst questionsRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\tconst orderedQuestionsQuery = query(questionsRef, orderByChild(\"time\"));\r\n\r\n\tonValue(orderedQuestionsQuery, snapshot => {\r\n\t\tif(!snapshot.exists()){\r\n\t\t\tconsole.log(\"No one questions yet!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet questions = [];\r\n\t\tsnapshot.forEach(childSnapshot => {\r\n\t\t\tconst key = childSnapshot.key;\r\n\t\t\tlet { userId, username, content, usersHandsUp, time } = childSnapshot.val();\r\n\t\t\tconsole.log(childSnapshot);\r\n\r\n\t\t\tconst isHandsUp = usersHandsUp && Object.keys(usersHandsUp).indexOf(loggedUserId) >= 0;\r\n\t\t\tconst timeObj = new Date(time);\r\n\t\t\ttime = dateToTimeString(timeObj);\r\n\r\n\t\t\tquestions.push({ key, userId, username, content, isHandsUp, time });\r\n\t\t});\r\n\r\n\t\tcallback(questions);\r\n\t}, {\r\n\t\tonlyOnce: true\r\n\t});\r\n};*/\r\n\r\nconst pushQuestion = (roomId, userId, username, content) => {\r\n\tconst db = getDatabase(),\r\n\t\ttime = Date.now();\r\n\r\n\tconst questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\tconst newQuestionQuery = push(questionsListRef);\r\n\r\n\tset(newQuestionQuery, { userId, username, content, time });\r\n};\r\n\r\nconst events = {\r\n\tonQuestionListChanged: (roomId, loggedUserId, callback) => {\r\n\t\tconst db = getDatabase();\r\n\t\tconst questionsRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\t\tconst orderedQuestionsQuery = query(questionsRef, orderByChild(\"time\"));\r\n\r\n\t\tonChildChanged(orderedQuestionsQuery, snapshot => {\r\n\t\t\tif(!snapshot.exists()){\r\n\t\t\t\tcallback([]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet questions = [];\r\n\t\t\tsnapshot.forEach(childSnapshot => {\r\n\t\t\t\tconst key = childSnapshot.key;\r\n\t\t\t\tlet { userId, username, content, usersHandsUp, time } = childSnapshot.val();\r\n\t\t\t\tconsole.log(childSnapshot);\r\n\r\n\t\t\t\tconst isHandsUp = usersHandsUp && Object.keys(usersHandsUp).indexOf(loggedUserId) >= 0;\r\n\t\t\t\tconst timeObj = new Date(time);\r\n\t\t\t\ttime = dateToTimeString(timeObj);\r\n\r\n\t\t\t\tquestions.push({ key, userId, username, content, isHandsUp, time });\r\n\t\t\t});\r\n\r\n\t\t\tcallback(questions);\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/*const changeUsername = (roomId, loggedUserId, username, callback) => {\r\n\tconst db = getDatabase();\r\n\tonValue(ref(db, \"rooms/\" + roomId + \"/questions\"), snapshot => {\r\n\t\tif(!snapshot.exists()){\r\n\t\t\tconsole.log(\"No one questions yet!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet updates = {};\r\n\t\tObject.entries(snapshot.val()).forEach(snapshotItem => {\r\n\t\t\tconst [key, item] = snapshotItem;\r\n\t\t\t\r\n\t\t\tif(item.userId == loggedUserId)\r\n\t\t\t\tupdates[\"/questions/\" + key + \"/username\"] = username;\r\n\t\t\tif(item.usersHandsUp && Object.keys(item.usersHandsUp).indexOf(loggedUserId) >= 0)\r\n\t\t\t\tupdates[\"/questions/\" + item.key + \"/usersHandsUp/\" + loggedUserId] = username;\r\n\t\t});\r\n\t\t// update(ref(db), updates) return Promise\r\n\t\tupdate(ref(db, \"rooms/\" + roomId), updates).then(() => {\r\n\t\t\tgetRoomQuestions(roomId, loggedUserId, callback);\r\n\t\t});\r\n\t});\r\n};*/\r\n\r\nexport default { login, newRoom, deleteRoom, pushQuestion, events };\r\n"]},"metadata":{},"sourceType":"module"}