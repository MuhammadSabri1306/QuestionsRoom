{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.replace-all.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport firebase from \"./services/firebase.js\";\nimport urlParams from \"./services/url-params.js\";\nimport PanelUser from \"./components/PanelUser.vue\";\nimport PanelForum from \"./components/PanelForum.vue\";\nimport FormNewRoom from \"./components/FormNewRoom.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    PanelUser: PanelUser,\n    PanelForum: PanelForum,\n    FormNewRoom: FormNewRoom\n  },\n  data: function data() {\n    return {\n      hasRoom: false,\n      loginStatus: \"\",\n      room: {\n        id: \"\",\n        name: \"\"\n      },\n      loggedUser: {\n        userId: \"\",\n        isAdmin: false,\n        username: \"\",\n        email: \"\"\n      },\n      questions: []\n    };\n  },\n  methods: {\n    setData: function setData(data) {\n      this.room = data.room;\n      this.loggedUser = data.loggedUser;\n      this.questions = data.questions;\n    },\n    getData: function getData() {\n      return {\n        hasRoom: this.hasRoom,\n        loginStatus: this.loginStatus,\n        room: this.room,\n        loggedUser: this.loggedUser,\n        questions: this.questions\n      };\n    },\n    setHasRoom: function setHasRoom(val) {\n      this.hasRoom = Boolean(val);\n    },\n    login: function login() {\n      var _this = this;\n\n      firebase.login(function (user) {\n        _this.loggedUser.userId = user.uid;\n        _this.loggedUser.username = user.displayName.replaceAll(\" \", \"_\");\n        _this.loggedUser.email = user.email;\n        _this.loggedUser.isAdmin = true;\n        _this.loginStatus = \"valid\";\n      });\n    },\n    newRoom: function newRoom(roomName) {\n      var _this2 = this;\n\n      firebase.newRoom(roomName, function (room) {\n        _this2.room.id = room.id;\n        _this2.room.name = room.name;\n        _this2.hasRoom = true;\n        urlParams.set(\"room\", _this2.room.id);\n        firebase.event.onQuestionChanged(_this2.room.id, function (question) {\n          _this2.questions.push(question);\n        }, function (question) {\n          var questionIndex = _this2.questions.indexOf(question);\n\n          if (questionIndex >= 0) _this2.questions.splice(questionIndex, 1);\n        });\n      });\n    },\n    closeRoom: function closeRoom() {\n      var _this3 = this;\n\n      firebase.deleteRoom(this.room.id, function () {\n        urlParams.delete(\"room\");\n        _this3.hasRoom = _this3.loggedUser.isAdmin = false;\n        _this3.loginStatus = _this3.room.id = _this3.room.name = _this3.loggedUser.userId = _this3.loggedUser.username = _this3.loggedUser.email = \"\";\n        _this3.questions = [];\n      });\n    },\n    addQuestion: function addQuestion(content) {\n      if (this.loggedUser.username.length < 1) this.loggedUser.username = \"Anonymous\";\n      firebase.pushQuestion(this.room.id, this.loggedUser.userId, this.loggedUser.username, content);\n    },\n    changeUsername: function changeUsername(username) {\n      var _this4 = this;\n\n      firebase.changeUsername(this.room.id, this.loggedUser.userId, username, function (questions) {\n        _this4.questions = questions;\n      });\n    },\n    toggleAdminMode: function toggleAdminMode() {\n      this.loggedUser.isAdmin = !this.loggedUser.isAdmin;\n    },\n    test: function test() {\n      alert(\"Test success!\");\n    }\n  },\n  created: function created() {\n    var _this5 = this;\n\n    var roomId = urlParams.get(\"room\");\n\n    if (this.hasRoom && roomId != null) {\n      firebase.getRoomQuestions(roomId, function (questions) {\n        _this5.questions = questions;\n      });\n    }\n  },\n  mounted: function mounted() {\n    var isEmailRegistered = this.loggedUser.email.length > 0;\n\n    if (this.hasRoom && isEmailRegistered) {\n      this.loggedUser.username = \"Anonymous\";\n\n      var idGen = function idGen() {\n        return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n      };\n\n      this.loggedUser.userId = idGen() + idGen() + \"-\" + idGen() + idGen() + idGen() + idGen();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAWA;AACA;AAEA;AACA;AACA;AAEA;AACAA,aADA;AAEAC;AACAC,wBADA;AAEAC,0BAFA;AAGAC;AAHA,GAFA;AAOAC,MAPA,kBAOA;AACA;AACAC,oBADA;AAEAC,qBAFA;AAGAC;AACAC,cADA;AAEAT;AAFA,OAHA;AAOAU;AACAC,kBADA;AAEAC,sBAFA;AAGAC,oBAHA;AAIAC;AAJA,OAPA;AAaAC;AAbA;AAeA,GAvBA;AAwBAC;AACAC,WADA,mBACAZ,IADA,EACA;AACA;AACA;AACA;AACA,KALA;AAMAa,WANA,qBAMA;AACA;AACAZ,6BADA;AAEAC,qCAFA;AAGAC,uBAHA;AAIAE,mCAJA;AAKAK;AALA;AAOA,KAdA;AAeAI,cAfA,sBAeAC,GAfA,EAeA;AACA;AACA,KAjBA;AAkBAC,SAlBA,mBAkBA;AAAA;;AACAC;AACA;AACA;AACA;AACA;AACA;AACA,OANA;AAOA,KA1BA;AA2BAC,WA3BA,mBA2BAC,QA3BA,EA2BA;AAAA;;AACAF;AACA;AACA;AAEA;AACAG;AAEAH;AACA;AACA,SAFA,EAEA;AACA;;AACA,kCACA;AACA,SANA;AAOA,OAdA;AAeA,KA3CA;AA4CAI,aA5CA,uBA4CA;AAAA;;AACAJ;AACAG;AAEA;AACA;AACA;AACA,OANA;AAOA,KApDA;AAqDAE,eArDA,uBAqDAC,OArDA,EAqDA;AACA;AACAN;AACA,KAxDA;AAyDAO,kBAzDA,0BAyDAhB,QAzDA,EAyDA;AAAA;;AACAS;AACA;AACA,OAFA;AAGA,KA7DA;AA8DAQ,mBA9DA,6BA8DA;AACA;AACA,KAhEA;AAiEAC,QAjEA,kBAiEA;AACAC;AACA;AAnEA,GAxBA;AA6FAC,SA7FA,qBA6FA;AAAA;;AACA;;AACA;AACAX;AACA;AACA,OAFA;AAGA;AACA,GApGA;AAqGAY,SArGA,qBAqGA;AACA;;AACA;AACA;;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AA7GA","names":["name","components","PanelUser","PanelForum","FormNewRoom","data","hasRoom","loginStatus","room","id","loggedUser","userId","isAdmin","username","email","questions","methods","setData","getData","setHasRoom","val","login","firebase","newRoom","roomName","urlParams","closeRoom","addQuestion","content","changeUsername","toggleAdminMode","test","alert","created","mounted"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\r\n\t<div id=\"app\" class=\"container-lg\">\r\n\t\t<div v-if=\"hasRoom\" class=\"panel-wrapper\">\r\n\t\t\t<PanelUser :userId=\"loggedUser.userId\" :isAdmin=\"loggedUser.isAdmin\" :username=\"loggedUser.username\" :email=\"loggedUser.email\" />\r\n\t\t\t<PanelForum :forumName=\"room.name\" :questions=\"questions\" :loggedUserId=\"loggedUser.userId\" />\r\n\t\t</div>\r\n\t\t<FormNewRoom v-else :loginStatus=\"loginStatus\" />\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nimport firebase from \"./services/firebase.js\";\r\nimport urlParams from \"./services/url-params.js\";\r\n\r\nimport PanelUser from \"./components/PanelUser.vue\";\r\nimport PanelForum from \"./components/PanelForum.vue\";\r\nimport FormNewRoom from \"./components/FormNewRoom.vue\";\r\n\r\nexport default {\r\n\tname: \"App\",\r\n\tcomponents: {\r\n\t\tPanelUser,\r\n\t\tPanelForum,\r\n\t\tFormNewRoom\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\thasRoom: false,\r\n\t\t\tloginStatus: \"\",\r\n\t\t\troom: {\r\n\t\t\t\tid: \"\",\r\n\t\t\t\tname: \"\"\r\n\t\t\t},\r\n\t\t\tloggedUser: {\r\n\t\t\t\tuserId: \"\",\r\n\t\t\t\tisAdmin: false,\r\n\t\t\t\tusername: \"\",\r\n\t\t\t\temail: \"\"\r\n\t\t\t},\r\n\t\t\tquestions: []\r\n\t\t};\r\n\t},\r\n\tmethods: {\r\n\t\tsetData(data){\r\n\t\t\tthis.room = data.room;\r\n\t\t\tthis.loggedUser = data.loggedUser;\r\n\t\t\tthis.questions = data.questions;\r\n\t\t},\r\n\t\tgetData(){\r\n\t\t\treturn {\r\n\t\t\t\thasRoom: this.hasRoom,\r\n\t\t\t\tloginStatus: this.loginStatus,\r\n\t\t\t\troom: this.room,\r\n\t\t\t\tloggedUser: this.loggedUser,\r\n\t\t\t\tquestions: this.questions\r\n\t\t\t};\r\n\t\t},\r\n\t\tsetHasRoom(val){\r\n\t\t\tthis.hasRoom = Boolean(val);\r\n\t\t},\r\n\t\tlogin(){\r\n\t\t\tfirebase.login(user => {\r\n\t\t\t\tthis.loggedUser.userId = user.uid;\r\n\t\t\t\tthis.loggedUser.username = user.displayName.replaceAll(\" \", \"_\");\r\n\t\t\t\tthis.loggedUser.email = user.email;\r\n\t\t\t\tthis.loggedUser.isAdmin = true;\r\n\t\t\t\tthis.loginStatus = \"valid\";\r\n\t\t\t});\r\n\t\t},\r\n\t\tnewRoom(roomName){\r\n\t\t\tfirebase.newRoom(roomName, room => {\r\n\t\t\t\tthis.room.id = room.id;\r\n\t\t\t\tthis.room.name = room.name;\r\n\r\n\t\t\t\tthis.hasRoom = true;\r\n\t\t\t\turlParams.set(\"room\", this.room.id);\r\n\r\n\t\t\t\tfirebase.event.onQuestionChanged(this.room.id, question => {\r\n\t\t\t\t\tthis.questions.push(question);\r\n\t\t\t\t}, question => {\r\n\t\t\t\t\tconst questionIndex = this.questions.indexOf(question);\r\n\t\t\t\t\tif(questionIndex >= 0)\r\n\t\t\t\t\t\tthis.questions.splice(questionIndex, 1);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\tcloseRoom(){\r\n\t\t\tfirebase.deleteRoom(this.room.id, () => {\r\n\t\t\t\turlParams.delete(\"room\");\r\n\r\n\t\t\t\tthis.hasRoom = this.loggedUser.isAdmin = false;\r\n\t\t\t\tthis.loginStatus = this.room.id = this.room.name = this.loggedUser.userId = this.loggedUser.username = this.loggedUser.email = \"\" ;\r\n\t\t\t\tthis.questions = [];\r\n\t\t\t});\r\n\t\t},\r\n\t\taddQuestion(content){\r\n\t\t\tif(this.loggedUser.username.length < 1) this.loggedUser.username = \"Anonymous\";\r\n\t\t\tfirebase.pushQuestion(this.room.id, this.loggedUser.userId, this.loggedUser.username, content);\r\n\t\t},\r\n\t\tchangeUsername(username){\r\n\t\t\tfirebase.changeUsername(this.room.id, this.loggedUser.userId, username, questions => {\r\n\t\t\t\tthis.questions = questions;\r\n\t\t\t});\r\n\t\t},\r\n\t\ttoggleAdminMode(){\r\n\t\t\tthis.loggedUser.isAdmin = !this.loggedUser.isAdmin;\r\n\t\t},\r\n\t\ttest(){\r\n\t\t\talert(\"Test success!\");\r\n\t\t}\r\n\t},\r\n\tcreated(){\r\n\t\tconst roomId = urlParams.get(\"room\");\r\n\t\tif(this.hasRoom && roomId != null){\r\n\t\t\tfirebase.getRoomQuestions(roomId, questions => {\r\n\t\t\t\tthis.questions = questions;\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\tmounted(){\r\n\t\tconst isEmailRegistered = this.loggedUser.email.length > 0;\r\n\t\tif(this.hasRoom && isEmailRegistered){\r\n\t\t\tthis.loggedUser.username = \"Anonymous\";\r\n\r\n\t\t\tconst idGen = () => (((1 + Math.random()) * 0x10000)|0).toString(16).substring(1);\r\n\t\t\tthis.loggedUser.userId = idGen() + idGen() + \"-\" + idGen() + idGen() + idGen() + idGen();\r\n\t\t}\r\n\t}\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}