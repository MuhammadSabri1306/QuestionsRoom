{"ast":null,"code":"import _slicedToArray from \"F:/Dev/VueProjects/questions-room/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { getDatabase, ref, push, set, update, onValue, onChildAdded, onChildRemoved, query, orderByChild } from \"firebase/database\";\nimport firebaseConfig from \"./firebase-config\";\ninitializeApp(firebaseConfig);\n\nvar dateToTimeString = function dateToTimeString(date) {\n  var hours = date.getHours().toString(),\n      minutes = date.getMinutes().toString();\n  if (hours.length < 2) hours = \"0\" + hours;\n  if (minutes.length < 2) minutes = \"0\" + minutes;\n  return hours + \".\" + minutes;\n};\n\nvar login = function login(callback) {\n  var provider = new GoogleAuthProvider(),\n      auth = getAuth();\n  signInWithPopup(auth, provider).then(function (result) {\n    return callback(result.user);\n  }).catch(function (error) {\n    return console.error(\"Error Code: \".concat(error.code, \"\\n\").concat(error.message));\n  });\n};\n\nvar newRoom = function newRoom(roomName, callback) {\n  var db = getDatabase();\n  var roomsListRef = ref(db, \"rooms\");\n  var newRoomPush = push(roomsListRef);\n  set(newRoomPush, {\n    roomName: roomName\n  }).then(function () {\n    callback({\n      id: newRoomPush.key,\n      name: roomName\n    });\n  });\n};\n\nvar deleteRoom = function deleteRoom(roomId, callback) {\n  // return createEmptyDataRoom();\n  var db = getDatabase();\n  set(ref(db, \"rooms/\" + roomId), null).then(callback).catch(function (error) {\n    return console.error(\"Error Code: \".concat(error.code, \"\\n\").concat(error.message));\n  });\n};\n\nvar getRoomQuestions = function getRoomQuestions(roomId, loggedUserId, callback) {\n  var db = getDatabase();\n  var questionsRef = ref(db, \"rooms/\" + roomId + \"/questions\");\n  var orderedQuestionsQuery = query(questionsRef, orderByChild(\"time\"));\n  console.log(orderedQuestionsQuery);\n  onValue(orderedQuestionsQuery, function (snapshot) {\n    if (!snapshot.exists()) {\n      console.log(\"No one questions yet!\");\n      return;\n    }\n\n    var key = snapshot.key;\n\n    var _snapshot$val = snapshot.val(),\n        userId = _snapshot$val.userId,\n        username = _snapshot$val.username,\n        content = _snapshot$val.content,\n        usersHandsUp = _snapshot$val.usersHandsUp,\n        time = _snapshot$val.time;\n\n    var isHandsUp = Object.keys(usersHandsUp).indexOf(loggedUserId) >= 0;\n    var timeObj = new Date(time);\n    time = dateToTimeString(timeObj);\n    callback({\n      key: key,\n      userId: userId,\n      username: username,\n      content: content,\n      isHandsUp: isHandsUp,\n      time: time\n    });\n  });\n};\n\nvar pushQuestion = function pushQuestion(roomId, userId, username, content) {\n  var db = getDatabase(),\n      time = Date.now();\n  var questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\n  var newQuestionQuery = push(questionsListRef);\n  set(newQuestionQuery, {\n    userId: userId,\n    username: username,\n    content: content,\n    time: time\n  });\n};\n\nvar event = {\n  onRoomAdded: function onRoomAdded(callback) {\n    var db = getDatabase();\n    var roomsListRef = ref(db, \"rooms\");\n    onChildAdded(roomsListRef, function (data) {\n      callback({\n        id: data.key,\n        name: data.val().roomName\n      });\n    });\n  },\n  onQuestionChanged: function onQuestionChanged(roomId, onAddedCallback, onremovedCallback) {\n    var db = getDatabase();\n    var questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\n\n    var getTargetQuestion = function getTargetQuestion(question) {\n      var userId = question.userId,\n          username = question.username,\n          content = question.content,\n          time = question.time;\n      var isHandsUp = false;\n      time = dateToTimeString(new Date(time));\n      return {\n        userId: userId,\n        username: username,\n        content: content,\n        isHandsUp: isHandsUp,\n        time: time\n      };\n    };\n\n    onChildAdded(questionsListRef, function (data) {\n      onAddedCallback(getTargetQuestion(data.val()));\n    });\n    onChildRemoved(questionsListRef, function (data) {\n      onremovedCallback(getTargetQuestion(data.val()));\n    });\n  }\n};\n\nvar changeUsername = function changeUsername(roomId, userId, username) {\n  var db = getDatabase();\n  onValue(ref(db, \"rooms/\" + roomId + \"/questions\"), function (snapshot) {\n    if (!snapshot.exists()) {\n      console.log(\"No one questions yet!\");\n      return;\n    }\n\n    var updates = [];\n    Object.entries(snapshot.val()).forEach(function (snapshotItem) {\n      var _snapshotItem = _slicedToArray(snapshotItem, 2),\n          key = _snapshotItem[0],\n          item = _snapshotItem[1];\n\n      console.log(snapshotItem);\n      if (item.userId == userId) updates[\"/questions/\" + key + \"/username\"] = username;\n      if (Object.keys(item.usersHandsUp).indexOf(userId) >= 0) updates[\"/questions/\" + item.key + \"/usersHandsUp/\" + userId] = username;\n    }); // update(ref(db), updates) return Promise\n\n    update(ref(db, \"rooms/\" + roomId), updates);\n  });\n};\n\nexport default {\n  login: login,\n  newRoom: newRoom,\n  deleteRoom: deleteRoom,\n  getRoomQuestions: getRoomQuestions,\n  pushQuestion: pushQuestion,\n  event: event,\n  changeUsername: changeUsername\n};","map":{"version":3,"sources":["F:/Dev/VueProjects/questions-room/src/services/firebase.js"],"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","getDatabase","ref","push","set","update","onValue","onChildAdded","onChildRemoved","query","orderByChild","firebaseConfig","dateToTimeString","date","hours","getHours","toString","minutes","getMinutes","length","login","callback","provider","auth","then","result","user","catch","error","console","code","message","newRoom","roomName","db","roomsListRef","newRoomPush","id","key","name","deleteRoom","roomId","getRoomQuestions","loggedUserId","questionsRef","orderedQuestionsQuery","log","snapshot","exists","val","userId","username","content","usersHandsUp","time","isHandsUp","Object","keys","indexOf","timeObj","Date","pushQuestion","now","questionsListRef","newQuestionQuery","event","onRoomAdded","data","onQuestionChanged","onAddedCallback","onremovedCallback","getTargetQuestion","question","changeUsername","updates","entries","forEach","snapshotItem","item"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\nimport { getDatabase, ref, push, set, update, onValue, onChildAdded, onChildRemoved, query, orderByChild } from \"firebase/database\";\r\nimport firebaseConfig from \"./firebase-config\";\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nconst dateToTimeString = date => {\r\n\tlet hours = date.getHours().toString(),\r\n\t\tminutes = date.getMinutes().toString();\r\n\r\n\tif(hours.length < 2) hours = \"0\" + hours;\r\n\tif(minutes.length < 2) minutes = \"0\" + minutes;\r\n\r\n\treturn hours + \".\" + minutes;\r\n};\r\n\r\nconst login = callback => {\r\n\tconst provider = new GoogleAuthProvider(),\r\n\t\tauth = getAuth();\r\n\tsignInWithPopup(auth, provider)\r\n\t\t.then(result => callback(result.user))\r\n\t\t.catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\nconst newRoom = (roomName, callback) => {\r\n\tconst db = getDatabase();\r\n\tconst roomsListRef = ref(db, \"rooms\");\r\n\tconst newRoomPush = push(roomsListRef);\r\n\r\n\tset(newRoomPush, { roomName }).then(() => {\r\n\t\tcallback({ id: newRoomPush.key, name: roomName });\r\n\t});\r\n};\r\n\r\nconst deleteRoom = (roomId, callback) => {\r\n\t// return createEmptyDataRoom();\r\n\tconst db = getDatabase();\r\n\tset(ref(db, \"rooms/\" + roomId), null)\r\n\t\t.then(callback)\r\n\t\t.catch(error => console.error(`Error Code: ${error.code}\\n${error.message}`));\r\n};\r\n\r\nconst getRoomQuestions = (roomId, loggedUserId, callback) => {\r\n\tconst db = getDatabase();\r\n\tconst questionsRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\tconst orderedQuestionsQuery = query(questionsRef, orderByChild(\"time\"));\r\n\r\n\tconsole.log(orderedQuestionsQuery);\r\n\r\n\tonValue(orderedQuestionsQuery, snapshot => {\r\n\t\tif(!snapshot.exists()){\r\n\t\t\tconsole.log(\"No one questions yet!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst key = snapshot.key;\r\n\t\tlet { userId, username, content, usersHandsUp, time } = snapshot.val();\r\n\r\n\t\tconst isHandsUp = Object.keys(usersHandsUp).indexOf(loggedUserId) >= 0;\r\n\t\tconst timeObj = new Date(time);\r\n\t\ttime = dateToTimeString(timeObj);\r\n\r\n\t\tcallback({ key, userId, username, content, isHandsUp, time });\r\n\t});\r\n};\r\n\r\nconst pushQuestion = (roomId, userId, username, content) => {\r\n\tconst db = getDatabase(),\r\n\t\ttime = Date.now();\r\n\r\n\tconst questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\tconst newQuestionQuery = push(questionsListRef);\r\n\r\n\tset(newQuestionQuery, { userId, username, content, time });\r\n};\r\n\r\nconst event = {\r\n\tonRoomAdded: callback => {\r\n\t\tconst db = getDatabase();\r\n\t\tconst roomsListRef = ref(db, \"rooms\");\r\n\r\n\t\tonChildAdded(roomsListRef, data => {\r\n\t\t\tcallback({\r\n\t\t\t\tid: data.key,\r\n\t\t\t\tname: data.val().roomName\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\tonQuestionChanged: (roomId, onAddedCallback, onremovedCallback) => {\r\n\t\tconst db = getDatabase();\r\n\t\tconst questionsListRef = ref(db, \"rooms/\" + roomId + \"/questions\");\r\n\t\tconst getTargetQuestion = question => {\r\n\t\t\tlet { userId, username, content, time } = question;\r\n\r\n\t\t\tconst isHandsUp = false;\r\n\t\t\ttime = dateToTimeString(new Date(time));\r\n\r\n\t\t\treturn {userId, username, content, isHandsUp, time};\r\n\t\t};\r\n\r\n\t\tonChildAdded(questionsListRef, data => {\r\n\t\t\tonAddedCallback( getTargetQuestion(data.val()) );\r\n\t\t});\r\n\r\n\t\tonChildRemoved(questionsListRef, data => {\r\n\t\t\tonremovedCallback( getTargetQuestion(data.val()) );\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst changeUsername = (roomId, userId, username) => {\r\n\tconst db = getDatabase();\r\n\tonValue(ref(db, \"rooms/\" + roomId + \"/questions\"), snapshot => {\r\n\t\tif(!snapshot.exists()){\r\n\t\t\tconsole.log(\"No one questions yet!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst updates = [];\r\n\t\tObject.entries(snapshot.val()).forEach(snapshotItem => {\r\n\t\t\tconst [key, item] = snapshotItem;\r\n\t\t\tconsole.log(snapshotItem);\r\n\t\t\tif(item.userId == userId)\r\n\t\t\t\tupdates[\"/questions/\" + key + \"/username\"] = username;\r\n\t\t\tif(Object.keys(item.usersHandsUp).indexOf(userId) >= 0)\r\n\t\t\t\tupdates[\"/questions/\" + item.key + \"/usersHandsUp/\" + userId] = username;\r\n\t\t});\r\n\t\t// update(ref(db), updates) return Promise\r\n\t\tupdate(ref(db, \"rooms/\" + roomId), updates);\r\n\t});\r\n};\r\n\r\nexport default { login, newRoom, deleteRoom, getRoomQuestions, pushQuestion, event, changeUsername };\r\n"]},"metadata":{},"sourceType":"module"}